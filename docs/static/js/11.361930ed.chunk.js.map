{"version":3,"sources":["dialog/readme.tsx"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_doc_utils__WEBPACK_IMPORTED_MODULE_2__","title","lead","module","styles","docsLink","examples","_React$useState","React","useState","_React$useState2","Object","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","open","setOpen","Fragment","_dialog__WEBPACK_IMPORTED_MODULE_5__","onClose","evt","console","log","detail","action","isDefaultAction","_button__WEBPACK_IMPORTED_MODULE_6__","raised","onClick","_React$useState3","_React$useState4","body","codeOnly","label","_createDialogQueue","createDialogQueue","dialogs","alert","confirm","prompt","_React$useState5","_React$useState6","response","setResponse","fireAlert","then","res","fireConfirm","firePrompt","inputProps","outlined","String","_dialog_queue__WEBPACK_IMPORTED_MODULE_7__","src","propsSrc","components","Dialog","DialogTitle","DialogContent","DialogActions","DialogButton","SimpleDialog"],"mappings":"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","file":"static/js/11.361930ed.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Docs, DocsExample, DocProps, DocsSubtitle, DocsP } from '@doc-utils';\nimport propsSrc from './generated-props.json';\nimport examples from './generated-examples.json';\n\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  DialogButton,\n  SimpleDialog\n} from './dialog';\n\nimport { Button } from '../button';\nimport { createDialogQueue, DialogQueue } from './dialog-queue';\n\nexport default function() {\n  return (\n    <Docs\n      title=\"Dialogs\"\n      lead=\"Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\"\n      module=\"@rmwc/dialog\"\n      styles={[\n        '@material/dialog/dist/mdc.dialog.css',\n        '@material/button/dist/mdc.button.css'\n      ]}\n      docsLink=\"https://material.io/develop/web/components/dialogs/\"\n      examples={examples}\n    >\n      <DocsSubtitle>Standard Usage</DocsSubtitle>\n\n      <DocsExample>\n        {function Example() {\n          const [open, setOpen] = React.useState(false);\n          return (\n            <>\n              <Dialog\n                open={open}\n                onClose={evt => {\n                  console.log(evt.detail.action);\n                  setOpen(false);\n                }}\n              >\n                <DialogTitle>Dialog Title</DialogTitle>\n                <DialogContent>This is a standard dialog.</DialogContent>\n                <DialogActions>\n                  <DialogButton action=\"close\">Cancel</DialogButton>\n                  <DialogButton action=\"accept\" isDefaultAction>\n                    Sweet!\n                  </DialogButton>\n                </DialogActions>\n              </Dialog>\n\n              <Button raised onClick={() => setOpen(true)}>\n                Open standard Dialog\n              </Button>\n            </>\n          );\n        }}\n      </DocsExample>\n\n      <DocsSubtitle>Simplified Usage</DocsSubtitle>\n\n      <DocsP>\n        Material Dialogs are a complex component. RMWC contains an additional\n        `SimpleDialog` component for ease of use that internally contains the\n        default structure already built out. Illustrated below is both the\n        standard and simple dialog usage.\n      </DocsP>\n      <DocsExample>\n        {function Example() {\n          const [open, setOpen] = React.useState(false);\n          return (\n            <>\n              <SimpleDialog\n                title=\"This is a simple dialog\"\n                body=\"You can pass the body prop or children.\"\n                open={open}\n                onClose={evt => {\n                  console.log(evt.detail.action);\n                  setOpen(false);\n                }}\n              />\n\n              <Button raised onClick={() => setOpen(true)}>\n                Open Simple Dialog\n              </Button>\n            </>\n          );\n        }}\n      </DocsExample>\n\n      <DocsSubtitle>Usage with DialogQueue</DocsSubtitle>\n      <DocsP>\n        Some dialog interactions are complex, but a lot of the time you just\n        need a simple alert or confirm dialog. `DialogQueue` allows you to open\n        dialogs from anywhere in your app and emulates the browsers built in\n        `alert`, `confirm` and `prompt` dialogs. If you've used the\n        `SnackbarQueue`, the `DialogQueue` is very similar.\n      </DocsP>\n      <DocsP>\n        Setup is nice and easy, create a queue object you can pass around in\n        your code base, pass the queues `dialogs` to the `DialogQueue`component,\n        and then use the `alert`, `prompt` or `confirm` api to open dialogs.\n      </DocsP>\n      <DocsExample codeOnly>\n        {/* jsx */ `\n        // Create a file that exports your queue\n        // myQueue.js\n        import { createDialogQueue } from '@rmwc/dialog';\n\n        export const queue = createDialogQueue();\n      `}\n      </DocsExample>\n      <DocsExample codeOnly>\n        {/* jsx */ `\n        // Somewhere at the top level of your app\n        // Render the DialogQueue\n        import React from 'react';\n        import { queue } from './myQueue';\n\n        export default function App() {\n          return (\n            <div>\n              ...\n              <DialogQueue\n                dialogs={queue.dialogs}\n                // You can also pass default options to pass to your dialogs\n                // ie, prevent all dialogs from dismissing from a click on the background scrim\n                preventOutsideDismiss\n              />\n            </div>\n          )\n        }\n        \n      `}\n      </DocsExample>\n\n      <DocsP>\n        The `alert`, `confirm`, and `prompt` functions were designed to mimic\n        the the built-in browser methods with a couple of small difference.\n        First, they all return a promise. The promise will always resolve\n        successfully with the response indicating the appropriate action.\n        `alert` the response will be `accept` for clicking the ok button, or\n        `close`. `confirm` will resolve `true` or `false`, and `prompt` will\n        resolve with the value entered into the input, or `null` if the closed\n        the dialog. Second, all methods the methods accept any valid prop for\n        `SimpleDialog`.\n      </DocsP>\n\n      <DocsExample codeOnly>\n        {/* jsx */ `\n        // Somewhere else in your app\n        // Could be a view, your redux store, anywhere you want...\n        import { queue } from './myQueue';\n\n        queue.alert({\n          title: 'Hi there',\n          body: 'Whats going on?'\n        });\n\n        queue.confirm({\n          title: <b>Are you positive?</b>,\n          body: 'You have selected pizza instead icecream!',\n          acceptLabel: 'CONFIRM'\n        });\n\n        queue.prompt({\n          title: 'Whats your name?',\n          body: 'Anything will do',\n          acceptLabel: 'Submit',\n          cancelLabel: 'Skip',\n          // For prompts only, you can pass props to the input\n          inputProps: {\n            outlined: true\n          }\n        });\n      `}\n      </DocsExample>\n\n      <DocsExample label=\"Inline Example\">\n        {() => {\n          const { dialogs, alert, confirm, prompt } = createDialogQueue();\n\n          function App() {\n            const [response, setResponse] = React.useState('____________');\n\n            const fireAlert = () =>\n              alert({ title: 'Hello!' }).then(res => setResponse(res));\n\n            const fireConfirm = () => confirm({}).then(res => setResponse(res));\n\n            const firePrompt = () =>\n              prompt({ inputProps: { outlined: true } }).then(res =>\n                setResponse(res)\n              );\n\n            return (\n              <div>\n                <Button label=\"Alert\" onClick={fireAlert} />\n                <Button label=\"Confirm\" onClick={fireConfirm} />\n                <Button label=\"Prompt\" onClick={firePrompt} />\n                <Button\n                  label=\"In Sequence\"\n                  onClick={() => {\n                    fireAlert();\n                    fireConfirm();\n                    firePrompt();\n                  }}\n                />\n\n                <p>\n                  Response: <b>{String(response)}</b>\n                </p>\n                <DialogQueue dialogs={dialogs} />\n              </div>\n            );\n          }\n          return <App />;\n        }}\n      </DocsExample>\n\n      <DocProps\n        src={propsSrc}\n        components={[\n          Dialog,\n          DialogTitle,\n          DialogContent,\n          DialogActions,\n          DialogButton,\n          SimpleDialog\n        ]}\n      />\n    </Docs>\n  );\n}\n"],"sourceRoot":""}