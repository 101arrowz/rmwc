{"version":3,"sources":["radio/readme.tsx"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_doc_utils__WEBPACK_IMPORTED_MODULE_2__","title","lead","module","styles","docsLink","examples","_React$useState","React","useState","_React$useState2","Object","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","value","setValue","Fragment","___WEBPACK_IMPORTED_MODULE_5__","checked","onChange","evt","currentTarget","label","name","console","log","src","propsSrc","components","Radio"],"mappings":"yshCAQeA,EAAA,mBACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAM,gBACNC,KAAK,sLACLC,OAAO,cACPC,OAAQ,CACN,qCACA,gDAEFC,SAAS,2EACTC,SAAUA,GAEVT,EAAAC,EAAAC,cAACC,EAAA,EAAD,yBAEAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACG,WAAmB,IAAAO,EACQC,IAAMC,SAAS,WADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACXM,EADWH,EAAA,GACJI,EADIJ,EAAA,GAGlB,OACEb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEH,MAAM,UACNI,QAAmB,YAAVJ,EACTK,SAAU,SAAAC,GAAG,OAAIL,EAASK,EAAIC,cAAcP,SAH9C,WAQAhB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEH,MAAM,QACNI,QAAmB,UAAVJ,EACTK,SAAU,SAAAC,GAAG,OAAIL,EAASK,EAAIC,cAAcP,SAH9C,SAQAhB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEH,MAAM,WACNI,QAAmB,aAAVJ,EACTK,SAAU,SAAAC,GAAG,OAAIL,EAASK,EAAIC,cAAcP,SAH9C,eAYRhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,2BACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,uPAMAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEK,MAAM,UACNR,MAAM,UACNS,KAAK,eACLJ,SAAU,SAAAC,GAAG,OAAII,QAAQC,IAAIL,EAAIC,cAAcP,UAGjDhB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEK,MAAM,QACNR,MAAM,QACNS,KAAK,eACLJ,SAAU,SAAAC,GAAG,OAAII,QAAQC,IAAIL,EAAIC,cAAcP,UAGjDhB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEK,MAAM,WACNR,MAAM,WACNS,KAAK,eACLJ,SAAU,SAAAC,GAAG,OAAII,QAAQC,IAAIL,EAAIC,cAAcP,YAKrDhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUyB,IAAKC,EAAUC,WAAY,CAACC","file":"static/js/24.0077d4ca.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Docs, DocsExample, DocProps, DocsSubtitle, DocsP } from '@doc-utils';\nimport propsSrc from './generated-props.json';\nimport examples from './generated-examples.json';\n\nimport { Radio } from '.';\n\nexport default function() {\n  return (\n    <Docs\n      title=\"Radio Buttons\"\n      lead=\"Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.\"\n      module=\"@rmwc/radio\"\n      styles={[\n        '@material/radio/dist/mdc.radio.css',\n        '@material/form-field/dist/mdc.form-field.css'\n      ]}\n      docsLink=\"https://material.io/develop/web/components/input-controls/radio-buttons/\"\n      examples={examples}\n    >\n      <DocsSubtitle>Controlled Usage</DocsSubtitle>\n\n      <DocsExample>\n        {function Example() {\n          const [value, setValue] = React.useState('cookies');\n\n          return (\n            <>\n              <Radio\n                value=\"cookies\"\n                checked={value === 'cookies'}\n                onChange={evt => setValue(evt.currentTarget.value)}\n              >\n                Cookies\n              </Radio>\n\n              <Radio\n                value=\"pizza\"\n                checked={value === 'pizza'}\n                onChange={evt => setValue(evt.currentTarget.value)}\n              >\n                Pizza\n              </Radio>\n\n              <Radio\n                value=\"icecream\"\n                checked={value === 'icecream'}\n                onChange={evt => setValue(evt.currentTarget.value)}\n              >\n                Icecream\n              </Radio>\n            </>\n          );\n        }}\n      </DocsExample>\n\n      <DocsSubtitle>Uncontrolled Usage</DocsSubtitle>\n      <DocsP>\n        You can use Radio Buttons and receive change events without having to\n        manually set the `checked` prop. Just give the Radio components the same\n        `name`. This example also shows using the `label` prop instead of\n        setting the label as a child.\n      </DocsP>\n      <DocsExample>\n        <>\n          <Radio\n            label=\"Cookies\"\n            value=\"cookies\"\n            name=\"myRadioGroup\"\n            onChange={evt => console.log(evt.currentTarget.value)}\n          />\n\n          <Radio\n            label=\"Pizza\"\n            value=\"pizza\"\n            name=\"myRadioGroup\"\n            onChange={evt => console.log(evt.currentTarget.value)}\n          />\n\n          <Radio\n            label=\"Icecream\"\n            value=\"icecream\"\n            name=\"myRadioGroup\"\n            onChange={evt => console.log(evt.currentTarget.value)}\n          />\n        </>\n      </DocsExample>\n\n      <DocProps src={propsSrc} components={[Radio]} />\n    </Docs>\n  );\n}\n"],"sourceRoot":""}