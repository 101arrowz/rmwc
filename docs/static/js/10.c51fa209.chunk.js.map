{"version":3,"sources":["data-table/readme.tsx"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_doc_utils__WEBPACK_IMPORTED_MODULE_3__","title","lead","module","styles","examples","addon","_React$useState","React","useState","_React$useState2","Object","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","sortDir","setSortDir","___WEBPACK_IMPORTED_MODULE_6__","alignEnd","sort","onSortChange","console","log","activated","_React$useState3","_React$useState4","rows","setRows","_React$useState5","_React$useState6","cols","setCols","sampleColumns","Array","fill","undefined","sampleRows","Fragment","style","height","width","stickyRows","stickyColumns","map","v","i","key","_select__WEBPACK_IMPORTED_MODULE_7__","label","options","value","String","onChange","evt","currentTarget","_React$useState7","_React$useState8","checked","setChecked","_checkbox__WEBPACK_IMPORTED_MODULE_8__","selected","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","placeholder","_switch__WEBPACK_IMPORTED_MODULE_9__","getRowProps","row","getCellProps","cell","index","isHead","includes","color","headers","data","src","propsSrc","components","DataTable","DataTableRow","DataTableCell","DataTableHead","DataTableBody","DataTableHeadCell","SimpleDataTable"],"mappings":"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","file":"static/js/10.c51fa209.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { Docs, DocsExample, DocsSubtitle, DocProps, DocsP } from '@doc-utils';\nimport propsSrc from './generated-props.json';\nimport examples from './generated-examples.json';\n\nimport {\n  DataTable,\n  DataTableContent,\n  DataTableHead,\n  DataTableBody,\n  DataTableHeadCell,\n  DataTableRow,\n  DataTableCell,\n  SimpleDataTable\n} from '.';\n\nimport { Select } from '../select';\nimport { Checkbox } from '../checkbox';\nimport { Switch } from '../switch';\n\nexport default function() {\n  return (\n    <Docs\n      title=\"Data Tables\"\n      lead=\"Data tables display sets of data.\"\n      module=\"@rmwc/data-table\"\n      styles={['@rmwc/data-table/data-table.css']}\n      examples={examples}\n      addon\n    >\n      <DocsSubtitle>Standard Table</DocsSubtitle>\n\n      <DocsP>\n        The DataTable components are intended to be flexible, properly styled,\n        Material compliant HTML tables. Because of the complexities of working\n        with datasets (especially large ones), the DataTable component DOES NOT\n        handle pagination, data fetching, sorting, or performance of long lists.\n      </DocsP>\n\n      <DocsExample>\n        {function Example() {\n          const [sortDir, setSortDir] = React.useState(null);\n          return (\n            <DataTable>\n              <DataTableContent>\n                <DataTableHead>\n                  <DataTableRow>\n                    <DataTableHeadCell>Item</DataTableHeadCell>\n                    <DataTableHeadCell\n                      alignEnd\n                      sort={sortDir}\n                      onSortChange={sortDir => {\n                        // @ts-ignore\n                        setSortDir(sortDir);\n                        console.log(sortDir);\n                      }}\n                    >\n                      Quantity (Click Me)\n                    </DataTableHeadCell>\n                    <DataTableHeadCell alignEnd>Unit price</DataTableHeadCell>\n                  </DataTableRow>\n                </DataTableHead>\n                <DataTableBody>\n                  <DataTableRow>\n                    <DataTableCell>Cookies</DataTableCell>\n                    <DataTableCell alignEnd>25</DataTableCell>\n                    <DataTableCell alignEnd>$2.90</DataTableCell>\n                  </DataTableRow>\n                  <DataTableRow activated>\n                    <DataTableCell>Pizza</DataTableCell>\n                    <DataTableCell alignEnd>50</DataTableCell>\n                    <DataTableCell alignEnd>$1.25</DataTableCell>\n                  </DataTableRow>\n                  <DataTableRow>\n                    <DataTableCell>Icecream</DataTableCell>\n                    <DataTableCell alignEnd>10</DataTableCell>\n                    <DataTableCell alignEnd>$2.35</DataTableCell>\n                  </DataTableRow>\n                </DataTableBody>\n              </DataTableContent>\n            </DataTable>\n          );\n        }}\n      </DocsExample>\n\n      <DocsSubtitle>Scrollable / Sticky Rows and Columns</DocsSubtitle>\n      <DocsP>\n        You can set a fixed sized for your table container to make it\n        scrollable. Additionally, you can specify `stickyRows` or\n        `stickyColumns` to affix rows or columns. Currently, only 1 row / column\n        is supported but more may be supported in a future release.\n      </DocsP>\n\n      <DocsExample>\n        {function Example() {\n          const [rows, setRows] = React.useState(0);\n          const [cols, setCols] = React.useState(0);\n          const sampleColumns = Array(7).fill(undefined);\n          const sampleRows = Array(50).fill(undefined);\n\n          return (\n            <>\n              <DataTable\n                style={{ height: '300px', width: '375px' }}\n                // @ts-ignore\n                stickyRows={rows}\n                // @ts-ignore\n                stickyColumns={cols}\n              >\n                <DataTableContent>\n                  <DataTableHead>\n                    <DataTableRow>\n                      <DataTableHeadCell>Label</DataTableHeadCell>\n                      {sampleColumns.map((v, i) => (\n                        <DataTableHeadCell key={i}>Header</DataTableHeadCell>\n                      ))}\n                    </DataTableRow>\n                  </DataTableHead>\n                  <DataTableBody>\n                    {sampleRows.map((v, i) => (\n                      <DataTableRow key={i}>\n                        <DataTableCell>Label</DataTableCell>\n                        <DataTableCell>R{i} C1</DataTableCell>\n                        <DataTableCell>R{i} C2</DataTableCell>\n                        <DataTableCell>R{i} C3</DataTableCell>\n                        <DataTableCell>R{i} C4</DataTableCell>\n                        <DataTableCell>R{i} C5</DataTableCell>\n                        <DataTableCell>R{i} C6</DataTableCell>\n                        <DataTableCell>R{i} C7</DataTableCell>\n                      </DataTableRow>\n                    ))}\n                  </DataTableBody>\n                </DataTableContent>\n              </DataTable>\n\n              <div>\n                Sticky\n                <Select\n                  label=\"Rows\"\n                  options={['0', '1']}\n                  value={String(rows)}\n                  onChange={evt => setRows(evt.currentTarget.value)}\n                />\n                <Select\n                  label=\"Cols\"\n                  options={['0', '1']}\n                  value={String(cols)}\n                  onChange={evt => setCols(evt.currentTarget.value)}\n                />\n              </div>\n            </>\n          );\n        }}\n      </DocsExample>\n\n      <DocsSubtitle>Form Controls</DocsSubtitle>\n\n      <DocsP>\n        DataTables play nice with the rest of the RMWC form controls. You are\n        responsible for scripting your own selection behavior.\n      </DocsP>\n\n      <DocsExample>\n        {function Example() {\n          const [checked, setChecked] = React.useState({});\n          const sampleRows = new Array(5).fill(undefined);\n\n          return (\n            <DataTable>\n              <DataTableContent>\n                <DataTableHead>\n                  <DataTableRow>\n                    <DataTableHeadCell>\n                      <Checkbox />\n                      Label\n                    </DataTableHeadCell>\n                    <DataTableHeadCell>Header</DataTableHeadCell>\n                    <DataTableHeadCell>Header</DataTableHeadCell>\n                    <DataTableHeadCell>Header</DataTableHeadCell>\n                    <DataTableHeadCell>Toggle</DataTableHeadCell>\n                  </DataTableRow>\n                </DataTableHead>\n                <DataTableBody>\n                  {sampleRows.map((v, i) => (\n                    // @ts-ignore\n                    <DataTableRow key={i} selected={checked[i]}>\n                      <DataTableCell>\n                        <Checkbox\n                          // @ts-ignore\n                          checked={checked[i]}\n                          onChange={evt => {\n                            // @ts-ignore\n                            checked[i] = evt.currentTarget.checked;\n                            setChecked({ ...checked });\n                          }}\n                        />\n                        Label\n                      </DataTableCell>\n                      <DataTableCell>\n                        <Select\n                          placeholder=\"--Select--\"\n                          options={['Cookies', 'Pizza', 'Icecream']}\n                        />\n                      </DataTableCell>\n                      <DataTableCell>R{i} C2</DataTableCell>\n                      <DataTableCell>R{i} C3</DataTableCell>\n                      <DataTableCell>\n                        <Switch />\n                      </DataTableCell>\n                    </DataTableRow>\n                  ))}\n                </DataTableBody>\n              </DataTableContent>\n            </DataTable>\n          );\n        }}\n      </DocsExample>\n\n      <DocsSubtitle>Simplified Usage</DocsSubtitle>\n\n      <DocsP>\n        If you just need to throw a table on the screen, you can pass an array\n        of data to SimpleDataTable.\n      </DocsP>\n\n      <DocsExample>\n        <SimpleDataTable\n          getRowProps={row => {\n            return row[1] > 100 ? { activated: true } : {};\n          }}\n          getCellProps={(cell, index, isHead) => {\n            return !isHead && index === 2 && !cell.includes('$')\n              ? { style: { color: 'red' } }\n              : {};\n          }}\n          headers={[['Item', 'Quantity', 'Value']]}\n          data={[\n            ['Cookies', 25, '$12.40'],\n            ['Pizza', 11, '$10.43'],\n            ['Icecream', 3, '1.43'],\n            ['Candy', 72, '$22.45'],\n            ['Cakes', 101, '$215.05'],\n            ['Muffins', 3, '$5.97']\n          ]}\n        />\n      </DocsExample>\n\n      <DocProps\n        src={propsSrc}\n        components={[\n          DataTable,\n          DataTableRow,\n          DataTableCell,\n          DataTableHead,\n          DataTableBody,\n          DataTableHeadCell,\n          SimpleDataTable\n        ]}\n      />\n    </Docs>\n  );\n}\n"],"sourceRoot":""}