{"version":3,"sources":["slider/readme.tsx"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_doc_utils__WEBPACK_IMPORTED_MODULE_2__","title","lead","module","styles","docsLink","examples","label","___WEBPACK_IMPORTED_MODULE_5__","onInput","evt","console","log","onChange","_React$useState","React","useState","_React$useState2","Object","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","value","setValue","detail","discrete","step","displayMarkers","min","max","src","propsSrc","components","Slider"],"mappings":"+u+BAQeA,EAAA,mBACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,KAAK,8EACLC,OAAO,eACPC,OAAQ,CAAC,kCACTC,SAAS,qEACTC,SAAUA,GAEVT,EAAAC,EAAAC,cAACC,EAAA,EAAD,+LAKAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,wPAMAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,4MAKAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaO,MAAM,gBACjBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,QAAS,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,IAC5BG,SAAU,SAAAH,GAAG,OAAIC,QAAQC,IAAIF,OAGjCb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaO,MAAM,cAChB,WAAmB,IAAAO,EACQC,IAAMC,SAAS,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACXM,EADWH,EAAA,GACJI,EADIJ,EAAA,GAIlB,OACEpB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEY,MAAOA,EACPP,SAAU,SAAAH,GAAG,OAAIW,EAASX,EAAIY,OAAOF,QACrCX,QAAS,SAAAC,GAAG,OAAIW,EAASX,EAAIY,OAAOF,QACpCG,UAAQ,EACRC,KAAM,MAKd3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaO,MAAM,gBACjBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQe,UAAQ,EAACE,gBAAc,EAACC,IAAK,IAAKC,IAAK,IAAKH,KAAM,KAG5D3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAU4B,IAAKC,EAAUC,WAAY,CAACC","file":"static/js/28.782bb069.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Docs, DocsExample, DocProps, DocsP } from '@doc-utils';\nimport propsSrc from './generated-props.json';\nimport examples from './generated-examples.json';\n\nimport { Slider } from '.';\n\nexport default function() {\n  return (\n    <Docs\n      title=\"Sliders\"\n      lead=\"Sliders let users select from a range of values by moving the slider thumb.\"\n      module=\"@rmwc/slider\"\n      styles={['@material/fab/dist/mdc.fab.css']}\n      docsLink=\"https://material.io/develop/web/components/input-controls/sliders/\"\n      examples={examples}\n    >\n      <DocsP>\n        Sliders can be both uncontrolled and controlled. When creating a\n        controlled `Slider`, you should be listening to the `onInput` event and\n        use `evt.detail.value` to set your new value.\n      </DocsP>\n      <DocsP>\n        Sliders will automatically layout themselves on window resize. If you\n        need to manually trigger a layout because the sliders container size\n        changed, the simplest way is to trigger a resize event\n        `window.dispatchEvent(new Event('resize'));`.\n      </DocsP>\n      <DocsP>\n        **Known Issue** `material-components-web` uses pointer events\n        internally. If you are using something below React 16.4, you will see\n        unknown attribute errors, however the slider should still work.\n      </DocsP>\n      <DocsExample label=\"Uncontrolled\">\n        <Slider\n          onInput={evt => console.log(evt)}\n          onChange={evt => console.log(evt)}\n        />\n      </DocsExample>\n      <DocsExample label=\"Controlled\">\n        {function Example() {\n          const [value, setValue] = React.useState(50);\n          // onInput is required and will fire continuously.\n          // onChange is optional and fires at the end of the interaction\n          return (\n            <Slider\n              value={value}\n              onChange={evt => setValue(evt.detail.value)}\n              onInput={evt => setValue(evt.detail.value)}\n              discrete\n              step={1}\n            />\n          );\n        }}\n      </DocsExample>\n      <DocsExample label=\"With Markers\">\n        <Slider discrete displayMarkers min={100} max={200} step={5} />\n      </DocsExample>\n\n      <DocProps src={propsSrc} components={[Slider]} />\n    </Docs>\n  );\n}\n"],"sourceRoot":""}