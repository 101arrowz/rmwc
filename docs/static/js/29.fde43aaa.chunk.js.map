{"version":3,"sources":["snackbar/readme.tsx"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_doc_utils__WEBPACK_IMPORTED_MODULE_2__","title","lead","module","styles","docsLink","examples","label","_React$useState","React","useState","_React$useState2","Object","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","open","setOpen","Fragment","___WEBPACK_IMPORTED_MODULE_5__","onClose","evt","message","action","onClick","console","log","_rmwc_button__WEBPACK_IMPORTED_MODULE_7__","raised","_React$useState3","_React$useState4","stacked","leading","timeout","codeOnly","_createSnackbarQueue","createSnackbarQueue","messages","notify","body","icon","actions","___WEBPACK_IMPORTED_MODULE_6__","src","propsSrc","components","Snackbar","SnackbarAction"],"mappings":"g5rFAceA,EAAA,mBACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAM,YACNC,KAAK,qGACLC,OAAO,iBACPC,OAAQ,CACN,2CACA,wCAEFC,SAAS,wDACTC,SAAUA,GAEVT,EAAAC,EAAAC,cAACC,EAAA,EAAD,oBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,yEAGAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaO,MAAM,WAChB,WAAmB,IAAAC,EACMC,IAAMC,UAAS,GADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACXM,EADWH,EAAA,GACLI,EADKJ,EAAA,GAGlB,OACEd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEH,KAAMA,EACNI,QAAS,SAAAC,GAAG,OAAIJ,GAAQ,IACxBK,QAAQ,wBACRC,OACExB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEV,MAAM,UACNe,QAAS,kBAAMC,QAAQC,IAAI,iBAKjC3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACEC,QAAM,EACNnB,MAAM,gBACNe,QAAS,SAAAH,GAAG,OAAIJ,GAASD,SAOnCjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaO,MAAM,iBAChB,WAAmB,IAAAoB,EACMlB,IAAMC,UAAS,GADrBkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GACXb,EADWc,EAAA,GACLb,EADKa,EAAA,GAGlB,OACE/B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEH,KAAMA,EACNI,QAAS,SAAAC,GAAG,OAAIJ,GAAQ,IACxBK,QAAQ,gBACRS,SAAO,EACPR,OAAQ,CACNxB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAgBV,MAAM,UACtBV,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAgBV,MAAM,WAExBuB,SAAO,EACPC,QAAS,MAGXlC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACEC,QAAM,EACNnB,MAAM,qBACNe,QAAS,SAAAH,GAAG,OAAIJ,GAASD,SAOnCjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,iCACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,8RAMAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,yMAKAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAagC,UAAQ,GAArB,2MASAnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAagC,UAAQ,GAArB,4mBAyBAnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,sRAOAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAagC,UAAQ,GAArB,64BAkCAnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaO,MAAM,kBAChB,WAAM,IAAA0B,EACwBC,cAArBC,EADHF,EACGE,SAAUC,EADbH,EACaG,OAwBlB,OAAOvC,EAAAC,EAAAC,cAtBP,WACE,OACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACElB,MAAM,SACNe,QAAS,kBACPc,EAAO,CACLnC,MAAOJ,EAAAC,EAAAC,cAAA,oBACPsC,KAAM,2BACNC,KAAM,QACNC,QAAS,CACP,CACEtC,MAAO,iBAMjBJ,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAeL,SAAUA,MAIxB,QAIXtC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUyC,IAAKC,EAAUC,WAAY,CAACC,IAAUC","file":"static/js/29.fde43aaa.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Docs, DocsExample, DocProps, DocsSubtitle, DocsP } from '@doc-utils';\nimport propsSrc from './generated-props.json';\nimport examples from './generated-examples.json';\n\nimport {\n  Snackbar,\n  SnackbarAction,\n  createSnackbarQueue,\n  SnackbarQueue\n} from './';\nimport { Button } from '@rmwc/button';\n\nexport default function() {\n  return (\n    <Docs\n      title=\"Snackbars\"\n      lead=\"Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\"\n      module=\"@rmwc/snackbar\"\n      styles={[\n        '@material/snackbar/dist/mdc.snackbar.css',\n        '@material/button/dist/mdc.button.css'\n      ]}\n      docsLink=\"https://material.io/develop/web/components/snackbars/\"\n      examples={examples}\n    >\n      <DocsSubtitle>Basic Usage</DocsSubtitle>\n      <DocsP>\n        You can render a snackbar in your UI and control its open state.\n      </DocsP>\n      <DocsExample label=\"Default\">\n        {function Example() {\n          const [open, setOpen] = React.useState(false);\n\n          return (\n            <>\n              <Snackbar\n                open={open}\n                onClose={evt => setOpen(false)}\n                message=\"This is a new message\"\n                action={\n                  <SnackbarAction\n                    label=\"Dismiss\"\n                    onClick={() => console.log('Click Me')}\n                  />\n                }\n              />\n\n              <Button\n                raised\n                label=\"Show snackbar\"\n                onClick={evt => setOpen(!open)}\n              />\n            </>\n          );\n        }}\n      </DocsExample>\n\n      <DocsExample label=\"Start Aligned\">\n        {function Example() {\n          const [open, setOpen] = React.useState(false);\n\n          return (\n            <>\n              <Snackbar\n                open={open}\n                onClose={evt => setOpen(false)}\n                message=\"Start aligned\"\n                stacked\n                action={[\n                  <SnackbarAction label=\"Yeah!\" />,\n                  <SnackbarAction label=\"No...\" />\n                ]}\n                leading\n                timeout={10000}\n              />\n\n              <Button\n                raised\n                label=\"Show start-aligned\"\n                onClick={evt => setOpen(!open)}\n              />\n            </>\n          );\n        }}\n      </DocsExample>\n\n      <DocsSubtitle>Usage with SnackbarQueue</DocsSubtitle>\n      <DocsP>\n        While rendering the Snackbar inline works for simple cases, you'll\n        likely have a notification system, or want to send notifications from\n        anywhere in your app. The SnackbarQueue exists as a convenience method\n        for handling these cases and rendering the snackbar messages for you.\n      </DocsP>\n      <DocsP>\n        Setup is nice and easy, create a queue object you can pass around in\n        your code base, pass the queues messages to the SnackbarQueue component,\n        and then use the notify api to send notifications.\n      </DocsP>\n      <DocsExample codeOnly>\n        {/* jsx */ `\n        // Create a file that exports your queue\n        // myQueue.js\n        import { createSnackbarQueue } from '@rmwc/snackbar';\n\n        export const queue = createSnackbarQueue();\n      `}\n      </DocsExample>\n      <DocsExample codeOnly>\n        {/* jsx */ `\n        // Somewhere at the top level of your app\n        // Render the SnackbarQueue\n        import React from 'react';\n        import { queue } from './myQueue';\n\n        export default function App() {\n          return (\n            <div>\n              ...\n              <SnackbarQueue\n                messages={queue.messages}\n                // You can also pass default options to pass to your notifications\n                // ie, make them all leading, stacked, etc\n                leading\n                stacked\n              />\n            </div>\n          )\n        }\n        \n      `}\n      </DocsExample>\n\n      <DocsP>\n        The notify function was designed to mimic the the built-in browser\n        Notifications api and can accept most of the relevant options (icon,\n        image, title, body, actions, ,etc). It also can accept any of the\n        Snackbar props. Just import your queue, and call the notify method.\n      </DocsP>\n\n      <DocsExample codeOnly>\n        {/* jsx */ `\n        // Somewhere else in your app\n        // Could be a view, your redux store, anywhere you want...\n        import { queue } from './myQueue';\n\n        // Simple example\n        queue.notify({\n          title: 'Hi there'\n        });\n\n        // With some features\n        queue.notify({\n          title: <b>Warning</b>,\n          body: 'You have selected pizza instead icecream!',\n          icon: 'warning',\n          actions: [\n            {\n              // NotificationAction api format\n              title: 'Fix It!',\n              icon: 'close',\n              action: 'fixit' // action will be available as evt.detail.reason in the onClose event\n            },\n            {\n              // OR SnackbarActionProps format\n              label: 'Continue...',\n              icon: 'check',\n              onClick: () => {}\n            },\n          ]\n        });\n      `}\n      </DocsExample>\n\n      <DocsExample label=\"Inline Example\">\n        {() => {\n          const { messages, notify } = createSnackbarQueue();\n\n          function App() {\n            return (\n              <div>\n                <Button\n                  label=\"Notify\"\n                  onClick={() =>\n                    notify({\n                      title: <b>Success</b>,\n                      body: 'You have selected pizza!',\n                      icon: 'check',\n                      actions: [\n                        {\n                          title: 'Dismiss'\n                        }\n                      ]\n                    })\n                  }\n                />\n                <SnackbarQueue messages={messages} />\n              </div>\n            );\n          }\n          return <App />;\n        }}\n      </DocsExample>\n\n      <DocProps src={propsSrc} components={[Snackbar, SnackbarAction]} />\n    </Docs>\n  );\n}\n"],"sourceRoot":""}