{"version":3,"sources":["chip/readme.tsx"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_doc_utils__WEBPACK_IMPORTED_MODULE_4__","title","lead","module","styles","docsLink","examples","label","___WEBPACK_IMPORTED_MODULE_7__","selected","icon","trailingIcon","_React$useState","React","useState","_React$useState2","Object","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","setSelected","key","checkmark","onRemove","evt","console","log","detail","onInteraction","onTrailingIconInteraction","_React$useState3","cookies","pizza","icecream","_React$useState4","toggleSelected","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_Users_jamesmfriedman_Sites_rmwc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","filter","onClick","_React$useState5","_React$useState6","choice","src","propsSrc","components","Chip","ChipSet"],"mappings":"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","file":"static/js/8.d065e08a.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Docs, DocsExample, DocProps, DocsSubtitle, DocsP } from '@doc-utils';\nimport propsSrc from './generated-props.json';\nimport examples from './generated-examples.json';\n\nimport { Chip, ChipSet } from '.';\n\nexport default function() {\n  return (\n    <Docs\n      title=\"Chips\"\n      lead=\"Chips represent complex entities in small blocks, such as a contact.\"\n      module=\"@rmwc/chip\"\n      styles={['@material/chips/dist/mdc.chips.css']}\n      docsLink=\"https://material.io/develop/web/components/chips/\"\n      examples={examples}\n    >\n      <DocsExample label=\"Default\">\n        <ChipSet>\n          <Chip selected label=\"Cookies\" />\n          <Chip label=\"Pizza\" />\n          <Chip label=\"Icecream\" />\n        </ChipSet>\n      </DocsExample>\n      <DocsExample label=\"With Icons\">\n        <ChipSet>\n          <Chip icon=\"favorite\" label=\"Cookies\" trailingIcon=\"close\" />\n        </ChipSet>\n      </DocsExample>\n      <DocsExample label=\"Event Handling\">\n        {function Example() {\n          const [selected, setSelected] = React.useState(false);\n          return (\n            <ChipSet>\n              <Chip\n                key=\"my-chip\"\n                label=\"Click Me\"\n                checkmark\n                selected={selected}\n                onRemove={evt => console.log('onRemove', evt.detail)}\n                onInteraction={evt => {\n                  console.log('onInteraction', evt.detail);\n                  setSelected(!selected);\n                }}\n                onTrailingIconInteraction={evt =>\n                  console.log('onTrailingIconIteraction', evt.detail)\n                }\n                trailingIcon=\"close\"\n              />\n            </ChipSet>\n          );\n        }}\n      </DocsExample>\n\n      <DocsSubtitle>Filter and Choice Chipsets</DocsSubtitle>\n      <DocsP>\n        You can specify a `ChipSet` as either a `filter` of `choice` which\n        slightly changes the visual styling of selected chips. While\n        `material-components-web` has some built in functionality for chip sets,\n        it doesn't fit well with React's unidirectional data flow. It is\n        recommended you use standard React patterns to store selected chips in\n        your state and render them accordingly.\n      </DocsP>\n      <DocsP>\n        Clicking on the trailing close icon will trigger a close animation and\n        put the chip in an exited state, but it is up to you to remove component\n        out from rendering. The you use the `onRemove` prop implement this\n        behavior.\n      </DocsP>\n\n      <DocsExample label=\"Filter\">\n        {function Example() {\n          const [selected, setSelected] = React.useState({\n            cookies: false,\n            pizza: false,\n            icecream: false\n          });\n          //@ts-ignore\n          const toggleSelected = key =>\n            setSelected({\n              ...selected,\n              //@ts-ignore\n              [key]: !selected[key]\n            });\n\n          return (\n            <ChipSet filter>\n              <Chip\n                selected={selected.cookies}\n                checkmark\n                onClick={() => toggleSelected('cookies')}\n                label=\"Cookies\"\n                trailingIcon=\"close\"\n              />\n              <Chip\n                selected={selected.pizza}\n                checkmark\n                onClick={() => toggleSelected('pizza')}\n                icon=\"local_pizza\"\n                label=\"Pizza\"\n                trailingIcon=\"close\"\n              />\n              <Chip\n                selected={selected.icecream}\n                checkmark\n                onClick={() => toggleSelected('icecream')}\n                icon=\"favorite_border\"\n                trailingIcon=\"close\"\n                label=\"Icecream\"\n              />\n            </ChipSet>\n          );\n        }}\n      </DocsExample>\n\n      <DocsExample label=\"Choice\">\n        {function Example() {\n          const [selected, setSelected] = React.useState({\n            cookies: false,\n            pizza: false,\n            icecream: false\n          });\n          //@ts-ignore\n          const toggleSelected = key =>\n            setSelected({\n              ...selected,\n              //@ts-ignore\n              [key]: !selected[key]\n            });\n\n          return (\n            <ChipSet choice>\n              <Chip\n                selected={selected.cookies}\n                onClick={() => toggleSelected('cookies')}\n                label=\"Cookies\"\n                trailingIcon=\"close\"\n              />\n              <Chip\n                selected={selected.pizza}\n                onClick={() => toggleSelected('pizza')}\n                icon=\"local_pizza\"\n                label=\"Pizza\"\n                trailingIcon=\"close\"\n              />\n              <Chip\n                selected={selected.icecream}\n                onClick={() => toggleSelected('icecream')}\n                icon=\"favorite_border\"\n                trailingIcon=\"close\"\n                label=\"Icecream\"\n              />\n            </ChipSet>\n          );\n        }}\n      </DocsExample>\n\n      <DocProps src={propsSrc} components={[Chip, ChipSet]} />\n    </Docs>\n  );\n}\n"],"sourceRoot":""}