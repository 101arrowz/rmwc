{
  "src/Base/DocumentComponent.js": [
    {
      "description": "",
      "methods": []
    }
  ],
  "src/Button/index.js": [
    {
      "description": "The Button component.",
      "displayName": "Button",
      "methods": [],
      "props": {
        "dense": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the Button dense.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "raised": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the Button raised.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "compact": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Reduce the Button's padding.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "unelevated": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the button unelevated.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "stroked": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the button stroked.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/Card/index.js": [
    {
      "description": "",
      "displayName": "CardPrimary",
      "methods": []
    },
    {
      "description": "Title for the Card",
      "displayName": "CardTitle",
      "methods": [],
      "props": {
        "large": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Make the title large."
        }
      }
    },
    {
      "description": "Subtitle for the Card",
      "displayName": "CardSubtitle",
      "methods": []
    },
    {
      "description": "Supporting text for the Card.",
      "displayName": "CardSupportingText",
      "methods": []
    },
    {
      "description": "Action Button for the Card",
      "displayName": "CardActions",
      "methods": [],
      "props": {
        "vertical": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Allows for vertical alignment of actions."
        }
      }
    },
    {
      "description": "Media for the Card",
      "displayName": "CardMedia",
      "methods": []
    },
    {
      "description": "Inidividual Media Item for the Card",
      "displayName": "CardMediaItem",
      "methods": [],
      "props": {
        "oneDotFiveX": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Sets the media item height to 120px."
        },
        "twoX": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Sets the media item height to 160px."
        },
        "threeX": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Sets the media item height to 240px."
        }
      }
    },
    {
      "description": "Horizontal content for the Card",
      "displayName": "CardHorizontalBlock",
      "methods": []
    },
    {
      "description": "A Card action Button. This is an instance of Button and can take all of the same props.",
      "displayName": "CardAction",
      "methods": [],
      "props": {
        "compact": {
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    },
    {
      "description": "A Card Component",
      "displayName": "Card",
      "methods": [],
      "props": {
        "themeDark": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Use the cards dark theme."
        }
      }
    }
  ],
  "src/Checkbox/index.js": [
    {
      "description": "",
      "displayName": "CheckboxRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "CheckboxNativeControl",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": {
            "value": "'checkbox'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "CheckboxBackground",
      "methods": []
    },
    {
      "description": "",
      "displayName": "CheckboxCheckmark",
      "methods": [],
      "props": {
        "viewBox": {
          "defaultValue": {
            "value": "'0 0 24 24'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "CheckboxCheckmarkPath",
      "methods": [],
      "props": {
        "fill": {
          "defaultValue": {
            "value": "'none'",
            "computed": false
          }
        },
        "stroke": {
          "defaultValue": {
            "value": "'white'",
            "computed": false
          }
        },
        "d": {
          "defaultValue": {
            "value": "'M1.73,12.91 8.1,19.28 22.79,4.59'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "CheckboxMixedmark",
      "methods": []
    },
    {
      "description": "",
      "displayName": "CheckboxLabel",
      "methods": []
    },
    {
      "description": "A Checkbox component",
      "displayName": "Checkbox",
      "methods": [],
      "props": {
        "id": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A DOM ID for the toggle."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the control."
        },
        "checked": {
          "flowType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Toggle the control on and off."
        },
        "indeterminate": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the control indeterminate"
        },
        "label": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A label for the control."
        },
        "themeDark": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Use the dark theme."
        }
      }
    }
  ],
  "src/Dialog/index.js": [
    {
      "description": "",
      "displayName": "DialogRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'alertdialog'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "The Dialog backdrop",
      "displayName": "DialogBackdrop",
      "methods": []
    },
    {
      "description": "The Dialog surface",
      "displayName": "DialogSurface",
      "methods": []
    },
    {
      "description": "The Dialog header",
      "displayName": "DialogHeader",
      "methods": []
    },
    {
      "description": "The Dialog title",
      "displayName": "DialogHeaderTitle",
      "methods": []
    },
    {
      "description": "The Dialog body",
      "displayName": "DialogBody",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "The Dialog footer",
      "displayName": "DialogFooter",
      "methods": []
    },
    {
      "description": "A Dialog footer button",
      "displayName": "DialogFooterButton",
      "methods": [],
      "props": {
        "accept": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": ""
        },
        "cancel": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": ""
        }
      }
    },
    {
      "description": "",
      "displayName": "Dialog",
      "methods": [],
      "props": {
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Whether or not the Dialog is showing."
        },
        "onAccept": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": true,
          "description": "Callback for when the accept Button is pressed."
        },
        "onCancel": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": true,
          "description": "Callback for when the Dialog was closed without acceptance."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": true,
          "description": "Callback for when the Dialog closes."
        },
        "themeDark": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Use the dark theme"
        }
      }
    },
    {
      "description": "A non-standard SimpleDialog component for ease of use.",
      "displayName": "SimpleDialog",
      "methods": [],
      "props": {
        "title": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A title for the default Dialog template.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "header": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Additional Dialog header content for the default Dialog template.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "body": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Body content for the default Dialog template, rendered before children.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "footer": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Additional footer content for the default Dialog template, rendered before any buttons.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "acceptLabel": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Creates an accept button for the default Dialog template with a given label. You can pass `null` to remove the button.",
          "defaultValue": {
            "value": "'Accept'",
            "computed": false
          }
        },
        "cancelLabel": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Creates an cancel button for the default Dialog with a given label. You can pass `null` to remove the button.",
          "defaultValue": {
            "value": "'Cancel'",
            "computed": false
          }
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Any children will be rendered in the body of the default Dialog template.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "scrollable": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Allow the body to be scrollable",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Whether or not the Dialog is showing.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onAccept": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": true,
          "description": "Callback for when the accept Button is pressed.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "onCancel": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": true,
          "description": "Callback for when the Dialog was closed without acceptance.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": true,
          "description": "Callback for when the Dialog closes.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "themeDark": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Use the dark theme",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/Drawer/index.js": [
    {
      "description": "",
      "displayName": "DrawerHeaderRoot",
      "methods": []
    },
    {
      "description": "",
      "displayName": "DrawerHeaderContent",
      "methods": []
    },
    {
      "description": "A Header for Drawers",
      "displayName": "DrawerHeader",
      "methods": []
    },
    {
      "description": "If you are using fixed a Toolbar, this provides space for it.",
      "displayName": "DrawerToolbarSpacer",
      "methods": []
    },
    {
      "description": "Content for Drawers. Please note this is an instance of mdc-list by default. You can change this to a a non list container by specifying the tag as 'div' or anything else.",
      "displayName": "DrawerContent",
      "methods": []
    },
    {
      "description": "",
      "displayName": "DrawerRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "DrawerDrawer",
      "methods": []
    },
    {
      "description": "A Drawer component",
      "displayName": "Drawer",
      "methods": [],
      "props": {
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Opens or closes the Drawer."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when the Drawer is closed."
        },
        "onOpen": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when the Drawer is opened."
        }
      }
    }
  ],
  "src/Elevation/index.js": [
    {
      "description": "The Elevation Component",
      "displayName": "Elevation",
      "methods": [],
      "props": {
        "z": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "A number from 0 - 24 for different levels of elevation"
        },
        "transition": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Allows for smooth transitions between elevations when the z value changes."
        }
      }
    }
  ],
  "src/Fab/index.js": [
    {
      "description": "",
      "displayName": "FabIcon",
      "methods": []
    },
    {
      "description": "A floating action button component",
      "displayName": "Fab",
      "methods": [],
      "props": {
        "mini": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the Fab smaller.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "exited": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Animates the FAB out of view. When this class is removed, the FAB will return to view.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "cssOnly": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "cssOnly Fab.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        }
      }
    }
  ],
  "src/FormField/index.js": [
    {
      "description": "",
      "displayName": "FormFieldRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "alignEnd": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "FormField",
      "methods": [],
      "props": {
        "alignEnd": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Position the input after the label."
        }
      }
    }
  ],
  "src/Grid/index.js": [
    {
      "description": "",
      "displayName": "GridRoot",
      "methods": []
    },
    {
      "description": "A Grid cell",
      "displayName": "GridCell",
      "methods": [],
      "props": {
        "span": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "A generic span value for all screen sizes."
        },
        "phone": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "A span value for phone screen sizes."
        },
        "tablet": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "A span value for tablet screen sizes."
        },
        "desktop": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "A span value for desktop screen sizes."
        }
      }
    },
    {
      "description": "By default, an inner grid component is included inside of <Grid>. Use GridInner when doing nested Grids.",
      "displayName": "GridInner",
      "methods": []
    },
    {
      "description": "A Grid component",
      "displayName": "Grid",
      "methods": []
    }
  ],
  "src/GridList/index.js": [
    {
      "description": "",
      "displayName": "GridListRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "tileGutter1": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "headerCaption": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "twolineCaption": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "withIconAlignStart": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tileAspect": {
          "defaultValue": {
            "value": "'1x1'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "GridListTiles",
      "methods": []
    },
    {
      "description": "The primary content for a Grid tile",
      "displayName": "GridTilePrimary",
      "methods": []
    },
    {
      "description": "",
      "displayName": "GridTilePrimaryContent",
      "methods": [],
      "props": {
        "wrap": {
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    },
    {
      "description": "A grid tile",
      "displayName": "GridTile",
      "methods": []
    },
    {
      "description": "The secondary content for a Grid tile",
      "displayName": "GridTileSecondary",
      "methods": []
    },
    {
      "description": "The icon for a Grid tile. This is an instance of Icon and can take all of the same props.",
      "displayName": "GridTileIcon",
      "methods": []
    },
    {
      "description": "The title for a Grid tile",
      "displayName": "GridTileTitle",
      "methods": []
    },
    {
      "description": "Supporting Text for the Grid Tile",
      "displayName": "GridTileTitleSupportText",
      "methods": []
    },
    {
      "description": "Grid List Component",
      "displayName": "GridList",
      "methods": [],
      "props": {
        "tileGutter1": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Use a 1px gutter."
        },
        "headerCaption": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Move the caption to the top of the card."
        },
        "twolineCaption": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Make the caption two lines."
        },
        "withIconAlignStart": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Leaves space for a start aligned icon."
        },
        "tileAspect": {
          "flowType": {
            "name": "union",
            "raw": "'1x1' | '16x9' | '2x3' | '3x2' | '4x3' | '3x4'",
            "elements": [
              {
                "name": "literal",
                "value": "'1x1'"
              },
              {
                "name": "literal",
                "value": "'16x9'"
              },
              {
                "name": "literal",
                "value": "'2x3'"
              },
              {
                "name": "literal",
                "value": "'3x2'"
              },
              {
                "name": "literal",
                "value": "'4x3'"
              },
              {
                "name": "literal",
                "value": "'3x4'"
              }
            ]
          },
          "required": true,
          "description": "One of the following values: 1x1, 16x9, 2x3, 3x2, 4x3, 3x4."
        }
      }
    }
  ],
  "src/Icon/index.js": [
    {
      "description": "",
      "displayName": "IconRoot",
      "methods": []
    },
    {
      "description": "An Icon component. Most of these options can be set once globally, read the documentation on Provider for more info.",
      "displayName": "Icon",
      "methods": [],
      "props": {
        "use": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "The icon to use. This can be a string for a font icon, a url, or whatever the selected strategy needs.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "strategy": {
          "flowType": {
            "name": "union",
            "raw": "'auto' | 'ligature' | 'className' | 'url' | 'component' | 'custom'",
            "elements": [
              {
                "name": "literal",
                "value": "'auto'"
              },
              {
                "name": "literal",
                "value": "'ligature'"
              },
              {
                "name": "literal",
                "value": "'className'"
              },
              {
                "name": "literal",
                "value": "'url'"
              },
              {
                "name": "literal",
                "value": "'component'"
              },
              {
                "name": "literal",
                "value": "'custom'"
              }
            ]
          },
          "required": false,
          "description": "Handle multiple methods of embedding an icon. 'ligature' uses ligature style embedding like material-icons, 'className' adds a class onto the element for libraries like glyphicons and ion icons, 'url' will load a remote image, and 'component' will render content as children like SVGs or any other React node. 'custom' allows you to specify your own render prop. If not set, 'auto' will be used or the defaults set inside of RMWCProvider."
        },
        "prefix": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A className prefix to use when using css font icons that use prefixes, i.e. font-awesome-, ion-, glyphicons-. This only applies when using the 'className' strategy."
        },
        "basename": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A base className for the icon namespace, i.e. material-icons."
        },
        "render": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(content: mixed) => React.Node",
            "signature": {
              "arguments": [
                {
                  "name": "content",
                  "type": {
                    "name": "mixed"
                  }
                }
              ],
              "return": {
                "name": "ReactNode",
                "raw": "React.Node"
              }
            }
          },
          "required": false,
          "description": "A render function to use when using the 'custom' strategy."
        }
      }
    }
  ],
  "src/IconToggle/index.js": [
    {
      "description": "",
      "displayName": "IconToggleRoot",
      "methods": [],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'button'",
            "computed": false
          }
        },
        "tabIndex": {
          "defaultValue": {
            "value": "'0'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "Icon Toggle Component",
      "displayName": "IconToggle",
      "methods": [],
      "props": {
        "onChange": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Object) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Object"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "An onChange callback that receives an event with event.target.value set to true or false.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "on": {
          "flowType": {
            "name": "Object"
          },
          "required": true,
          "description": "An object that can be parsed as valid JSON that gets passed to the MDC constructor.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "off": {
          "flowType": {
            "name": "Object"
          },
          "required": true,
          "description": "An object that can be parsed as valid JSON that gets passed to the MDC constructor.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "checked": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether the toggle is on or off",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        }
      }
    }
  ],
  "src/LinearProgress/index.js": [
    {
      "description": "",
      "displayName": "LinearProgressRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'progressbar'",
            "computed": false
          }
        },
        "determinate": {
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "reversed": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "accent": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "LinearProgressBufferingDots",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgressBuffer",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgressPrimaryBar",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgressSecondaryBar",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgressBarInner",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgress",
      "methods": [],
      "props": {
        "progress": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Progress float percentage between 0 and 1."
        },
        "buffer": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "A Progress buffer float percentage between 0 and 1."
        },
        "determinate": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether or not the Progress bar is determinate."
        },
        "reversed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Progress goes from right to left."
        }
      }
    }
  ],
  "src/List/index.js": [
    {
      "description": "The ListItem component.",
      "displayName": "ListItem",
      "methods": [],
      "props": {
        "selected": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "A modifier for a selected state."
        },
        "activated": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "A modifier for an active state."
        }
      }
    },
    {
      "description": "Text for the ListItem",
      "displayName": "ListItemText",
      "methods": []
    },
    {
      "description": "Secondary text for the ListItem",
      "displayName": "ListItemSecondaryText",
      "methods": []
    },
    {
      "description": "A graphic / icon for the ListItem",
      "displayName": "ListItemGraphic",
      "methods": []
    },
    {
      "description": "A meta icon for the ListItem",
      "displayName": "ListItemMeta",
      "methods": []
    },
    {
      "description": "A container to group ListItems",
      "displayName": "ListGroup",
      "methods": []
    },
    {
      "description": "A subheader for the ListGroup",
      "displayName": "ListGroupSubheader",
      "methods": []
    },
    {
      "description": "A divider for the List",
      "displayName": "ListDivider",
      "methods": []
    },
    {
      "description": "",
      "displayName": "List",
      "methods": [],
      "props": {
        "dense": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Reduces the padding on List items."
        },
        "twoLine": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Gives more space for dual lined list items."
        },
        "avatarList": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the list start detail circular for avatars."
        },
        "nonInteractive": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the list non interactive"
        }
      }
    },
    {
      "description": "",
      "displayName": "SimpleListItem",
      "methods": [],
      "props": {
        "text": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Text for the ListItem.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "secondaryText": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Secondary Text for the ListItem.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "graphic": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A graphic icon for the ListItem.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "meta": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A meta icon for the ListItem",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        }
      }
    }
  ],
  "src/Menu/index.js": [
    {
      "description": "",
      "displayName": "MenuRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "tabIndex": {
          "defaultValue": {
            "value": "'-1'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "MenuItems",
      "methods": [],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'menu'",
            "computed": false
          }
        },
        "aria-hidden": {
          "defaultValue": {
            "value": "'true'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "This is just the ListItem component exported from the Menu module for convience.",
      "displayName": "MenuItem",
      "methods": []
    },
    {
      "description": "A Menu Anchor. When using the anchorCorner prop of SimpleMenu, you must set MenuAnchors position to absolute.",
      "displayName": "MenuAnchor",
      "methods": []
    },
    {
      "description": "A menu component",
      "displayName": "SimpleMenu",
      "methods": [],
      "props": {
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether or not the Menu is open."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when the Menu closes."
        },
        "onSelected": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when a Menu item is selected."
        },
        "anchorCorner": {
          "flowType": {
            "name": "union",
            "raw": "'bottomEnd' | 'bottomeLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
            "elements": [
              {
                "name": "literal",
                "value": "'bottomEnd'"
              },
              {
                "name": "literal",
                "value": "'bottomeLeft'"
              },
              {
                "name": "literal",
                "value": "'bottomRight'"
              },
              {
                "name": "literal",
                "value": "'bottomStart'"
              },
              {
                "name": "literal",
                "value": "'topEnd'"
              },
              {
                "name": "literal",
                "value": "'topLeft'"
              },
              {
                "name": "literal",
                "value": "'topRight'"
              },
              {
                "name": "literal",
                "value": "'topStart'"
              }
            ]
          },
          "required": false,
          "description": "Manually position the menu to one of the corners."
        }
      }
    }
  ],
  "src/Provider/index.js": [
    {
      "description": "Provides default options for children\nProp override options in providerDefaults with the same name",
      "displayName": "RMWCProvider",
      "methods": [
        {
          "name": "buildOptions",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "signature",
                "type": "object",
                "raw": "{\n  /** Set the buttons ripple effect globally */\n  buttonDefaultRipple?: boolean,\n  /** Set the listItems ripple effect globally */\n  listItemDefaultRipple?: boolean,\n  /** Set the iconClassNameBase. Read the icon docs for more info. */\n  iconClassNameBase?: string,\n  /** Set the iconClassNamePrefix. Read the icon docs for more info. */\n  iconClassNamePrefix?: string,\n  /** Set the default iconStrategy. Read the icon docs for more info. */\n  iconStrategy?: IconStrategyT,\n  /** Sets a default render function to be used when the iconStrategy is custom */\n  iconRender?: (content: mixed) => mixed\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "buttonDefaultRipple",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "listItemDefaultRipple",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "iconClassNameBase",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "iconClassNamePrefix",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "iconStrategy",
                      "value": {
                        "name": "union",
                        "raw": "'auto' | 'ligature' | 'className' | 'url' | 'component' | 'custom'",
                        "elements": [
                          {
                            "name": "literal",
                            "value": "'auto'"
                          },
                          {
                            "name": "literal",
                            "value": "'ligature'"
                          },
                          {
                            "name": "literal",
                            "value": "'className'"
                          },
                          {
                            "name": "literal",
                            "value": "'url'"
                          },
                          {
                            "name": "literal",
                            "value": "'component'"
                          },
                          {
                            "name": "literal",
                            "value": "'custom'"
                          }
                        ],
                        "required": false
                      }
                    },
                    {
                      "key": "iconRender",
                      "value": {
                        "name": "signature",
                        "type": "function",
                        "raw": "(content: mixed) => mixed",
                        "signature": {
                          "arguments": [
                            {
                              "name": "content",
                              "type": {
                                "name": "mixed"
                              }
                            }
                          ],
                          "return": {
                            "name": "mixed"
                          }
                        },
                        "required": false
                      }
                    }
                  ]
                },
                "alias": "RMWCProviderOptionsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "buttonDefaultRipple": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Set the buttons ripple effect globally",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "listItemDefaultRipple": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Set the listItems ripple effect globally",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "iconClassNameBase": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Set the iconClassNameBase. Read the icon docs for more info.",
          "defaultValue": {
            "value": "'material-icons'",
            "computed": false
          }
        },
        "iconClassNamePrefix": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Set the iconClassNamePrefix. Read the icon docs for more info.",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "iconStrategy": {
          "flowType": {
            "name": "union",
            "raw": "'auto' | 'ligature' | 'className' | 'url' | 'component' | 'custom'",
            "elements": [
              {
                "name": "literal",
                "value": "'auto'"
              },
              {
                "name": "literal",
                "value": "'ligature'"
              },
              {
                "name": "literal",
                "value": "'className'"
              },
              {
                "name": "literal",
                "value": "'url'"
              },
              {
                "name": "literal",
                "value": "'component'"
              },
              {
                "name": "literal",
                "value": "'custom'"
              }
            ]
          },
          "required": false,
          "description": "Set the default iconStrategy. Read the icon docs for more info.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          }
        },
        "iconRender": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(content: mixed) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "content",
                  "type": {
                    "name": "mixed"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Sets a default render function to be used when the iconStrategy is custom",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        }
      }
    }
  ],
  "src/Radio/index.js": [
    {
      "description": "",
      "displayName": "RadioRoot",
      "methods": []
    },
    {
      "description": "",
      "displayName": "RadioNativeControl",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": {
            "value": "'radio'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "RadioBackground",
      "methods": []
    },
    {
      "description": "",
      "displayName": "RadioOuterCircle",
      "methods": []
    },
    {
      "description": "",
      "displayName": "RadioInnerCircle",
      "methods": []
    },
    {
      "description": "",
      "displayName": "RadioLabel",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Radio",
      "methods": [],
      "props": {
        "id": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A DOM ID for the toggle."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the control."
        },
        "checked": {
          "flowType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Toggle the control on and off."
        },
        "label": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A label for the control."
        }
      }
    }
  ],
  "src/Ripple/index.js": [
    {
      "description": "",
      "displayName": "Ripple",
      "methods": [
        {
          "name": "checkProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "signature",
                "type": "object",
                "raw": "{\n  /** Uses the primary palette. */\n  primary?: boolean,\n  /** Uses the accent palette. */\n  accent?: boolean,\n  /** Lets a ripple grow outside of its bounds, just like on Checkboxes. */\n  unbounded?: boolean\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "primary",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "accent",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "unbounded",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    }
                  ]
                },
                "alias": "RipplePropsT"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "initRipple",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "destroyRipple",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "primary": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Uses the primary palette.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "accent": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Uses the accent palette.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "unbounded": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Lets a ripple grow outside of its bounds, just like on Checkboxes.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "needsRippleSurface": {
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    }
  ],
  "src/Select/index.js": [
    {
      "description": "",
      "displayName": "SelectRoot",
      "methods": [],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'listbox'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "SelectSurface",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SelectLabel",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "SelectSelectedText",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SelectBottomLine",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SelectMenu",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SelectMenu",
      "methods": [],
      "props": {
        "style": {
          "defaultValue": {
            "value": "{\n  height: '48px',\n  marginTop: '16px',\n  marginBottom: '8px',\n  display: 'inline-flex',\n  alignItems: 'flex-end'\n}",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "Select",
      "methods": [],
      "props": {
        "options": {
          "flowType": {
            "name": "union",
            "raw": "string[] | { [value: string]: string } | mixed[]",
            "elements": [
              {
                "name": "unknown"
              },
              {
                "name": "signature",
                "type": "object",
                "raw": "{ [value: string]: string }",
                "signature": {
                  "properties": [
                    {
                      "key": {
                        "name": "string"
                      },
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    }
                  ]
                }
              },
              {
                "name": "unknown"
              }
            ]
          },
          "required": true,
          "description": "Options accepts flat arrays, value => label maps, and more. See examples for details."
        },
        "label": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A label for the form control."
        },
        "placeholder": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Placeholder text for the form control."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the form control."
        },
        "cssOnly": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes a cssOnly select."
        }
      }
    }
  ],
  "src/Slider/index.js": [
    {
      "description": "",
      "displayName": "SliderRoot",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderTrackContainer",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderTrack",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderTrackMarkerContainer",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderThumbContainer",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderPin",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderPinValueMarker",
      "methods": []
    },
    {
      "description": "",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderFocusRing",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Slider",
      "methods": [],
      "props": {
        "onChange": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A callback that fires when the Slider stops sliding which takes an event with event.target.value set to the Slider's value."
        },
        "onInput": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A callback that fires continuously while the Slider is slidng that takes an event with event.target.value set to the Slider's value."
        },
        "value": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The value of the Slider."
        },
        "min": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The minimum value of the Slider."
        },
        "max": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The maximum value of the Slider."
        },
        "step": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "A step to quantize values by."
        },
        "discrete": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Displays the exact value of the Slider on the knob."
        },
        "displayMarkers": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Displays the individual step markers on the Slider track."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the control."
        }
      }
    }
  ],
  "src/Snackbar/index.js": [
    {
      "description": "",
      "displayName": "SnackbarRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "alignStart": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "aria-live": {
          "defaultValue": {
            "value": "'assertive'",
            "computed": false
          }
        },
        "aria-atomic": {
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "aria-hidden": {
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "SnackbarText",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SnackbarActionWrapper",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SnackbarActionButton",
      "methods": []
    },
    {
      "description": "A Snackbar component for notifications.",
      "displayName": "Snackbar",
      "methods": [],
      "props": {
        "show": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Show the Snackbar."
        },
        "onShow": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "() => mixed",
            "signature": {
              "arguments": [],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A callback thats fired when the Snackbar shows."
        },
        "onHide": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "() => mixed",
            "signature": {
              "arguments": [],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A callback thats fired when the Snackbar hides."
        },
        "message": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A string or other renderable JSX to be used as the message body."
        },
        "timeout": {
          "flowType": {
            "name": "number"
          },
          "required": false,
          "description": "Milliseconds to show the Snackbar for."
        },
        "actionHandler": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "() => mixed",
            "signature": {
              "arguments": [],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when action is pressed. The actionText property must be set to use this."
        },
        "actionText": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Label for the action button."
        },
        "multiline": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Lets the Snackbar text overflow onto multiple lines."
        },
        "actionOnBottom": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Places the action underneath the message text."
        },
        "dismissesOnAction": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether or not the Snackbar dismisses on the action press."
        }
      }
    }
  ],
  "src/Switch/index.js": [
    {
      "description": "",
      "displayName": "SwitchRoot",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SwitchNativeControl",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": {
            "value": "'checkbox'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "SwitchBackground",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SwitchKnob",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SwitchLabel",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Switch",
      "methods": [],
      "props": {
        "id": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A DOM ID for the toggle."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the control."
        },
        "checked": {
          "flowType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Toggle the control on and off."
        },
        "label": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A label for the control."
        },
        "rootProps": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "Props for the root element. By default, props spread to the input."
        }
      }
    }
  ],
  "src/Tabs/index.js": [
    {
      "description": "",
      "displayName": "TabBarRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "TabBarIndicator",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TabBarScrollerRoot",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TabBarScrollerIndicatorBack",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "TabBarScrollerIndicatorInner",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TabBarScrollerScrollFrameEl",
      "methods": []
    },
    {
      "description": "A Tab component",
      "displayName": "Tab",
      "methods": []
    },
    {
      "description": "A Tab icon. This is an instance of the Icon component.",
      "displayName": "TabIcon",
      "methods": []
    },
    {
      "description": "Text that goes under a Tab icon",
      "displayName": "TabIconText",
      "methods": []
    },
    {
      "description": "The TabBar component",
      "displayName": "TabBar",
      "methods": [],
      "props": {
        "onChange": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex."
        },
        "activeTabIndex": {
          "flowType": {
            "name": "number"
          },
          "required": true,
          "description": "The index of the active tab."
        }
      }
    },
    {
      "description": "The TabBar Scroll container",
      "displayName": "TabBarScroller",
      "methods": [
        {
          "name": "reinitTabBarScroller",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "indicatorForward": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "The forward indicator to use, gets passed to the Icon use prop. An SVG has been included by default to work correctly without material-icons.",
          "defaultValue": {
            "value": "<svg\n  style={{ fill: 'currentColor' }}\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  width=\"24\"\n>\n  <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\n  <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n</svg>",
            "computed": false
          }
        },
        "indicatorBack": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "The back indicator to use, gets passed to the Icon use prop. An SVG has been included by default to work correctly without material-icons.",
          "defaultValue": {
            "value": "<svg\n  style={{ fill: 'currentColor' }}\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  width=\"24\"\n>\n  <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\" />\n  <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n</svg>",
            "computed": false
          }
        }
      }
    }
  ],
  "src/TextField/index.js": [
    {
      "description": "",
      "displayName": "TextFieldRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "TextFieldLabel",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "TextFieldInput",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": {
            "value": "'text'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "displayName": "TextFieldTextarea",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TextFieldBottomLine",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TextFieldOutline",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TextFieldOutlinePath",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TextFieldIdleOutline",
      "methods": []
    },
    {
      "description": "A help text component",
      "displayName": "TextFieldHelperText",
      "methods": [],
      "props": {
        "persistent": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the help text always visible"
        },
        "validationMsg": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the help a validation message style"
        }
      }
    },
    {
      "description": "An Icon in a TextField",
      "displayName": "TextFieldIcon",
      "methods": [],
      "props": {
        "use": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": true,
          "description": "The icon to use"
        }
      }
    },
    {
      "description": "",
      "displayName": "TextField",
      "methods": [],
      "props": {
        "inputRef": {
          "flowType": {
            "name": "ReactRef",
            "raw": "React.Ref<any>",
            "elements": [
              {
                "name": "any"
              }
            ]
          },
          "required": false,
          "description": "A ref for the native input."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the input."
        },
        "required": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Mark the input as required."
        },
        "invalid": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the TextField visually invalid. This is sometimes automatically applied in cases where required and pattern is used."
        },
        "dense": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the TextField dense"
        },
        "box": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Box in the TextField"
        },
        "outlined": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Outline the TextField"
        },
        "label": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A label for the input."
        },
        "withLeadingIcon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Add a leading icon."
        },
        "withTrailingIcon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Add a trailing icon."
        },
        "rootProps": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "By default, props spread to the input. These props are for the component's root container."
        },
        "textarea": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes a multiline TextField."
        },
        "fullwidth": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the TextField fullwidth."
        }
      }
    }
  ],
  "src/Theme/index.js": [
    {
      "description": "A Theme Component.",
      "displayName": "Theme",
      "methods": [],
      "props": {
        "use": {
          "flowType": {
            "name": "union",
            "raw": "string | string[]",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "required": true,
          "description": "A theme option as a string, a space separated string for multiple values, or an array of valid theme options."
        }
      }
    }
  ],
  "src/Toolbar/index.js": [
    {
      "description": "",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "fixed": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "waterfall": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "fixedLastrowOnly": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "flexible": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "flexibleDefaultBehavior": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    },
    {
      "description": "A Toolbar title",
      "displayName": "ToolbarTitle",
      "methods": []
    },
    {
      "description": "",
      "displayName": "ToolbarSection",
      "methods": [],
      "props": {
        "alignStart": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Aligns the ToolbarSection at the start."
        },
        "alignEnd": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Aligns the ToolbarSection at the end."
        },
        "shrinkToFit": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the ToolbarSection shrink to fit."
        }
      }
    },
    {
      "description": "A Toolbar row",
      "displayName": "ToolbarRow",
      "methods": []
    },
    {
      "description": "This component can be placed after a fixed Toolbar component to fill in the space.",
      "displayName": "ToolbarFixedAdjust",
      "methods": []
    },
    {
      "description": "A Menu Icon For the Toolbar. This is an instance of the Icon component.",
      "displayName": "ToolbarMenuIcon",
      "methods": []
    },
    {
      "description": "A standard Icon for toolbar actions. This is an instance of the Icon component.",
      "displayName": "ToolbarIcon",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Toolbar",
      "methods": [],
      "props": {
        "fixed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the toolbar fixed"
        },
        "waterfall": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Adds a waterfall effect on scroll"
        },
        "fixedLastrowOnly": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Fixes the last row of a multi-row toolbar"
        },
        "flexible": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "makes the toolbar flexible"
        },
        "flexibleDefaultBehavior": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "further defines the background and title movement behavior, use in conjunction with flexible."
        }
      }
    }
  ],
  "src/Typography/index.js": [
    {
      "description": "The Typography Component",
      "displayName": "Typography",
      "methods": [],
      "props": {
        "use": {
          "flowType": {
            "name": "union",
            "raw": "'display4' | 'display3' | 'display2' | 'display1' | 'headline' | 'title' | 'subheading2' | 'subheading1' | 'body2' | 'body1' | 'caption' | 'button'",
            "elements": [
              {
                "name": "literal",
                "value": "'display4'"
              },
              {
                "name": "literal",
                "value": "'display3'"
              },
              {
                "name": "literal",
                "value": "'display2'"
              },
              {
                "name": "literal",
                "value": "'display1'"
              },
              {
                "name": "literal",
                "value": "'headline'"
              },
              {
                "name": "literal",
                "value": "'title'"
              },
              {
                "name": "literal",
                "value": "'subheading2'"
              },
              {
                "name": "literal",
                "value": "'subheading1'"
              },
              {
                "name": "literal",
                "value": "'body2'"
              },
              {
                "name": "literal",
                "value": "'body1'"
              },
              {
                "name": "literal",
                "value": "'caption'"
              },
              {
                "name": "literal",
                "value": "'button'"
              }
            ]
          },
          "required": true,
          "description": "The typography style."
        },
        "adjustMargin": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Sets adjust margin modifier for Typography."
        }
      }
    }
  ],
  "src/docs/App.js": [
    {
      "description": "",
      "displayName": "App",
      "methods": [
        {
          "name": "doSizeCheck",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ]
    }
  ],
  "src/docs/Home.js": [
    {
      "description": "",
      "methods": []
    }
  ],
  "src/docs/Submenu.js": [
    {
      "description": "",
      "displayName": "Submenu",
      "methods": [],
      "props": {
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ]
}