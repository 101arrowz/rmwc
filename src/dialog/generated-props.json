{
  "npm": {},
  "typescript": {
    "DialogButton": {
      "documentation": {
        "contents": [
          "<p>Action buttons for the Dialog.</p>\n"
        ],
        "contentsRaw": "Action buttons for the Dialog.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "class",
      "name": "DialogButton",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L89",
      "extends": [
        "Component<DialogButtonProps & ComponentProps>"
      ],
      "methods": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<DialogButtonProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<DialogButtonProps & ComponentProps>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<DialogButtonProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<DialogButtonProps & ComponentProps>, nextState: Readonly<S>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidCatch",
          "inheritedFrom": "ComponentLifecycle.componentDidCatch",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                ],
                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidCatch",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "error",
                  "type": "Error"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "errorInfo",
                  "type": "ErrorInfo"
                }
              ],
              "returnType": "void",
              "type": "(error: Error, errorInfo: ErrorInfo) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidMount",
          "inheritedFrom": "ComponentLifecycle.componentDidMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately after a component is mounted. Setting state here will trigger re-rendering.</p>\n"
                ],
                "contentsRaw": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidUpdate",
          "inheritedFrom": "NewLifecycle.componentDidUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately after updating occurs. Not called for the initial render.</p>\n<p>The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.</p>\n"
                ],
                "contentsRaw": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<DialogButtonProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "snapshot",
                  "type": "SS"
                }
              ],
              "returnType": "void",
              "type": "(prevProps: Readonly<DialogButtonProps & ComponentProps>, prevState: Readonly<S>, snapshot?: SS) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<DialogButtonProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<DialogButtonProps & ComponentProps>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUnmount",
          "inheritedFrom": "ComponentLifecycle.componentWillUnmount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in <code>componentDidMount</code>.</p>\n"
                ],
                "contentsRaw": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUnmount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<DialogButtonProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<DialogButtonProps & ComponentProps>, nextState: Readonly<S>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "forceUpdate",
          "inheritedFrom": "Component.forceUpdate",
          "signatures": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "forceUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callBack",
                  "type": "undefined | () => void"
                }
              ],
              "returnType": "void",
              "type": "(callBack?: undefined | () => void) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getSnapshotBeforeUpdate",
          "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                ],
                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "getSnapshotBeforeUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<DialogButtonProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<S>"
                }
              ],
              "returnType": "SS | null",
              "type": "(prevProps: Readonly<DialogButtonProps & ComponentProps>, prevState: Readonly<S>) => SS | null"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L93",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L93",
              "parameters": [],
              "returnType": "Element",
              "type": "() => Element"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "setState",
          "inheritedFrom": "Component.setState",
          "signatures": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "setState",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "state",
                  "type": "(prevState: Readonly<S>, props: Readonly<DialogButtonProps & ComponentProps>) => null | S |  | null | S | "
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callback",
                  "type": "undefined | () => void"
                }
              ],
              "returnType": "void",
              "type": "(state: (prevState: Readonly<S>, props: Readonly<DialogButtonProps & ComponentProps>) => null | S |  | null | S | , callback?: undefined | () => void) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "shouldComponentUpdate",
          "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                ],
                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "shouldComponentUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<DialogButtonProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "boolean",
              "type": "(nextProps: Readonly<DialogButtonProps & ComponentProps>, nextState: Readonly<S>, nextContext: any) => boolean"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>If set, <code>this.context</code> will be set at runtime to the current value of the given Context.</p>\n<p>Usage:</p>\n<pre><code class=\"lang-ts\">type MyContext = number\nconst Ctx = React.createContext&lt;MyContext&gt;(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType&lt;typeof Ctx&gt;\n  render () {\n    return &lt;&gt;My context&#39;s value: {this.context}&lt;/&gt;;\n  }\n}\n</code></pre>\n",
              {
                "tag": "see",
                "value": "https://reactjs.org/docs/context.html#classcontexttype"
              }
            ],
            "contentsRaw": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n\n\n@see https://reactjs.org/docs/context.html#classcontexttype",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "contextType",
          "inheritedFrom": "Component.contextType",
          "type": "Context<any>"
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "displayName",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L92",
          "defaultValue": "\"DialogButton\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>If using the new style context, re-declare this in your class to be the\n<code>React.ContextType</code> of your <code>static contextType</code>.</p>\n<pre><code class=\"lang-ts\">static contextType = MyContext\ncontext!: React.ContextType&lt;typeof MyContext&gt;\n</code></pre>\n",
              {
                "tag": "see",
                "value": "https://reactjs.org/docs/legacy-context.html"
              }
            ],
            "contentsRaw": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\n\n```ts\nstatic contextType = MyContext\ncontext!: React.ContextType<typeof MyContext>\n```\n\n\n@see https://reactjs.org/docs/legacy-context.html",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isDeprecated": "if used without a type annotation, or without static contextType",
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "context",
          "inheritedFrom": "Component.context",
          "type": "any"
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "props",
          "inheritedFrom": "Component.props",
          "type": "Readonly<DialogButtonProps & ComponentProps> & Readonly<>"
        },
        {
          "documentation": {
            "contents": [],
            "contentsRaw": "",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isDeprecated": "https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs",
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "refs",
          "inheritedFrom": "Component.refs",
          "type": "{ [key: string]: ReactInstance }"
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "state",
          "inheritedFrom": "Component.state",
          "type": "Readonly<S>"
        }
      ],
      "constructorType": {
        "documentation": {
          "contents": [
            {
              "tag": "see",
              "value": "https://reactjs.org/docs/legacy-context.html"
            }
          ],
          "contentsRaw": "@see https://reactjs.org/docs/legacy-context.html",
          "metadata": {}
        },
        "fileName": "node_modules/@types/react/index.d.ts",
        "flags": {
          "isDeprecated": true,
          "isExported": true,
          "isExternal": false,
          "isOptional": false,
          "isPrivate": false,
          "isProtected": false,
          "isPublic": false,
          "isRest": false,
          "isStatic": false
        },
        "kind": "constructor",
        "name": "constructor",
        "inheritedFrom": "Component.__constructor",
        "signatures": [
          {
            "documentation": {
              "contents": [],
              "contentsRaw": "",
              "metadata": {}
            },
            "fileName": "node_modules/@types/react/index.d.ts",
            "kind": "signature",
            "name": "new DialogButton",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "Readonly<DialogButtonProps & ComponentProps>"
              }
            ],
            "returnType": "DialogButton",
            "type": "(props: Readonly<DialogButtonProps & ComponentProps>) => DialogButton"
          },
          {
            "documentation": {
              "contents": [
                {
                  "tag": "see",
                  "value": "https://reactjs.org/docs/legacy-context.html"
                }
              ],
              "contentsRaw": "@see https://reactjs.org/docs/legacy-context.html",
              "metadata": {}
            },
            "fileName": "node_modules/@types/react/index.d.ts",
            "kind": "signature",
            "name": "new DialogButton",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "DialogButtonProps & ComponentProps"
              },
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": true,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "context",
                "type": "any"
              }
            ],
            "returnType": "DialogButton",
            "type": "(props: DialogButtonProps & ComponentProps, context?: any) => DialogButton"
          }
        ]
      }
    },
    "Dialog": {
      "documentation": {
        "contents": [
          "<p>A Dialog component.</p>\n"
        ],
        "contentsRaw": "A Dialog component.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "class",
      "name": "Dialog",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L129",
      "extends": [
        "FoundationComponent<MDCDialogFoundation, DialogProps>"
      ],
      "methods": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<DialogProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<DialogProps>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<DialogProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<DialogProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "close",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L155",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "close",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L155",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidCatch",
          "inheritedFrom": "ComponentLifecycle.componentDidCatch",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                ],
                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidCatch",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "error",
                  "type": "Error"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "errorInfo",
                  "type": "ErrorInfo"
                }
              ],
              "returnType": "void",
              "type": "(error: Error, errorInfo: ErrorInfo) => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidMount",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L162",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "componentDidMount",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L162",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidUpdate",
          "inheritedFrom": "FoundationComponent.componentDidUpdate",
          "signatures": [
            {
              "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "componentDidUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "FoundationPropsT<DialogProps>"
                }
              ],
              "returnType": "void",
              "type": "(prevProps: FoundationPropsT<DialogProps>) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<DialogProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<DialogProps>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUnmount",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L199",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "componentWillUnmount",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L199",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<DialogProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<FoundationPropsT<DialogProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "createElement",
          "inheritedFrom": "FoundationComponent.createElement",
          "signatures": [
            {
              "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "createElement",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "elementName",
                  "type": "string"
                }
              ],
              "returnType": "FoundationElement<ExtractProps<ElementType>, ElementType>",
              "type": "(elementName: string) => FoundationElement<ExtractProps<ElementType>, ElementType>"
            }
          ]
        },
        {
          "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "emit",
          "inheritedFrom": "FoundationComponent.emit",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Fires a cross-browser-compatible custom event from the component root of the given type,</p>\n"
                ],
                "contentsRaw": "Fires a cross-browser-compatible custom event from the component root of the given type,",
                "metadata": {}
              },
              "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "emit",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evtType",
                  "type": "string"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evtData",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "shouldBubble",
                  "defaultValue": "false",
                  "type": "boolean"
                }
              ],
              "returnType": "CustomEvent<any>",
              "type": "(evtType: string, evtData: any, shouldBubble?: boolean) => CustomEvent<any>"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getDefaultFoundation",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L212",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "getDefaultFoundation",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L212",
              "parameters": [],
              "returnType": "MDCDialogFoundation",
              "type": "() => MDCDialogFoundation"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getSnapshotBeforeUpdate",
          "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                ],
                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "getSnapshotBeforeUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<FoundationPropsT<DialogProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<FoundationStateT<S>>"
                }
              ],
              "returnType": "SS | null",
              "type": "(prevProps: Readonly<FoundationPropsT<DialogProps>>, prevState: Readonly<FoundationStateT<S>>) => SS | null"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "handleDocumentKeydown",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L141",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "handleDocumentKeydown",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L141",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "handleInteraction",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L269",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "handleInteraction",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L269",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "evt",
                  "type": "MouseEvent & KeyboardEvent & MouseEvent & KeyboardEvent"
                }
              ],
              "returnType": "void",
              "type": "(evt: MouseEvent & KeyboardEvent & MouseEvent & KeyboardEvent) => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "open",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L148",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "open",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L148",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L277",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L277",
              "parameters": [],
              "returnType": "Element",
              "type": "() => Element"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "shouldComponentUpdate",
          "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                ],
                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "shouldComponentUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<FoundationPropsT<DialogProps>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<FoundationStateT<S>>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "boolean",
              "type": "(nextProps: Readonly<FoundationPropsT<DialogProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => boolean"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "sync",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L204",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "sync",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L204",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "props",
                  "type": "DialogProps"
                }
              ],
              "returnType": "void",
              "type": "(props: DialogProps) => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "syncProp",
          "inheritedFrom": "FoundationComponent.syncProp",
          "signatures": [
            {
              "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "syncProp",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prop",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProp",
                  "type": "any"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callback",
                  "type": "() => void"
                }
              ],
              "returnType": "void",
              "type": "(prop: any, prevProp: any, callback: () => void) => void"
            }
          ]
        },
        {
          "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "update",
          "inheritedFrom": "FoundationComponent.update",
          "signatures": [
            {
              "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
              "kind": "signature",
              "name": "update",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "displayName",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L133",
          "defaultValue": "\"Dialog\"",
          "type": "string"
        },
        {
          "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "shouldDebounce",
          "defaultValue": "false",
          "inheritedFrom": "FoundationComponent.shouldDebounce",
          "type": "boolean"
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "buttons",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L138",
          "defaultValue": " null",
          "type": "null | HTMLElement[]"
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "container",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L136",
          "defaultValue": " null",
          "type": "null | HTMLElement"
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "content",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L137",
          "defaultValue": " null",
          "type": "null | HTMLElement"
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultButton",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L139",
          "defaultValue": " null",
          "type": "null | HTMLElement"
        },
        {
          "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elements",
          "inheritedFrom": "FoundationComponent.elements",
          "type": "{ [key: string]: FoundationElement<any, any> }"
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusTrap",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L140",
          "defaultValue": " null",
          "type": "FocusTrap | null"
        },
        {
          "fileName": "src/dialog/node_modules/@rmwc/base/foundation-component.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "foundation",
          "inheritedFrom": "FoundationComponent.foundation",
          "type": "MDCDialogFoundation"
        }
      ],
      "constructorType": {
        "fileName": "src/dialog/index.tsx",
        "flags": {
          "isExported": true,
          "isExternal": false,
          "isOptional": false,
          "isPrivate": false,
          "isProtected": false,
          "isPublic": false,
          "isRest": false,
          "isStatic": false
        },
        "kind": "constructor",
        "name": "constructor",
        "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L141",
        "signatures": [
          {
            "fileName": "src/dialog/index.tsx",
            "kind": "signature",
            "name": "new Dialog",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L141",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "DialogProps"
              }
            ],
            "returnType": "Dialog",
            "type": "(props: DialogProps) => Dialog"
          }
        ]
      }
    },
    "SimpleDialog": {
      "documentation": {
        "contents": [
          "<p>A SimpleDialog component for ease of use.</p>\n"
        ],
        "contentsRaw": "A SimpleDialog component for ease of use.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "class",
      "name": "SimpleDialog",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L322",
      "extends": [
        "Component<SimpleDialogProps>"
      ],
      "methods": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleDialogProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<SimpleDialogProps>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleDialogProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<SimpleDialogProps>, nextState: Readonly<S>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidCatch",
          "inheritedFrom": "ComponentLifecycle.componentDidCatch",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                ],
                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidCatch",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "error",
                  "type": "Error"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "errorInfo",
                  "type": "ErrorInfo"
                }
              ],
              "returnType": "void",
              "type": "(error: Error, errorInfo: ErrorInfo) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidMount",
          "inheritedFrom": "ComponentLifecycle.componentDidMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately after a component is mounted. Setting state here will trigger re-rendering.</p>\n"
                ],
                "contentsRaw": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidUpdate",
          "inheritedFrom": "NewLifecycle.componentDidUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately after updating occurs. Not called for the initial render.</p>\n<p>The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.</p>\n"
                ],
                "contentsRaw": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<SimpleDialogProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "snapshot",
                  "type": "SS"
                }
              ],
              "returnType": "void",
              "type": "(prevProps: Readonly<SimpleDialogProps>, prevState: Readonly<S>, snapshot?: SS) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleDialogProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<SimpleDialogProps>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUnmount",
          "inheritedFrom": "ComponentLifecycle.componentWillUnmount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in <code>componentDidMount</code>.</p>\n"
                ],
                "contentsRaw": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUnmount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleDialogProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<SimpleDialogProps>, nextState: Readonly<S>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "forceUpdate",
          "inheritedFrom": "Component.forceUpdate",
          "signatures": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "forceUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callBack",
                  "type": "undefined | () => void"
                }
              ],
              "returnType": "void",
              "type": "(callBack?: undefined | () => void) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getSnapshotBeforeUpdate",
          "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                ],
                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "getSnapshotBeforeUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<SimpleDialogProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<S>"
                }
              ],
              "returnType": "SS | null",
              "type": "(prevProps: Readonly<SimpleDialogProps>, prevState: Readonly<S>) => SS | null"
            }
          ]
        },
        {
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L334",
          "signatures": [
            {
              "fileName": "src/dialog/index.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L334",
              "parameters": [],
              "returnType": "Element",
              "type": "() => Element"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "setState",
          "inheritedFrom": "Component.setState",
          "signatures": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "setState",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "state",
                  "type": "(prevState: Readonly<S>, props: Readonly<SimpleDialogProps>) => null | S |  | null | S | "
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callback",
                  "type": "undefined | () => void"
                }
              ],
              "returnType": "void",
              "type": "(state: (prevState: Readonly<S>, props: Readonly<SimpleDialogProps>) => null | S |  | null | S | , callback?: undefined | () => void) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "shouldComponentUpdate",
          "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                ],
                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "shouldComponentUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleDialogProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "boolean",
              "type": "(nextProps: Readonly<SimpleDialogProps>, nextState: Readonly<S>, nextContext: any) => boolean"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>If set, <code>this.context</code> will be set at runtime to the current value of the given Context.</p>\n<p>Usage:</p>\n<pre><code class=\"lang-ts\">type MyContext = number\nconst Ctx = React.createContext&lt;MyContext&gt;(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType&lt;typeof Ctx&gt;\n  render () {\n    return &lt;&gt;My context&#39;s value: {this.context}&lt;/&gt;;\n  }\n}\n</code></pre>\n",
              {
                "tag": "see",
                "value": "https://reactjs.org/docs/context.html#classcontexttype"
              }
            ],
            "contentsRaw": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n\n\n@see https://reactjs.org/docs/context.html#classcontexttype",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "contextType",
          "inheritedFrom": "Component.contextType",
          "type": "Context<any>"
        },
        {
          "documentation": {
            "contents": [
              "<p>If using the new style context, re-declare this in your class to be the\n<code>React.ContextType</code> of your <code>static contextType</code>.</p>\n<pre><code class=\"lang-ts\">static contextType = MyContext\ncontext!: React.ContextType&lt;typeof MyContext&gt;\n</code></pre>\n",
              {
                "tag": "see",
                "value": "https://reactjs.org/docs/legacy-context.html"
              }
            ],
            "contentsRaw": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\n\n```ts\nstatic contextType = MyContext\ncontext!: React.ContextType<typeof MyContext>\n```\n\n\n@see https://reactjs.org/docs/legacy-context.html",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isDeprecated": "if used without a type annotation, or without static contextType",
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "context",
          "inheritedFrom": "Component.context",
          "type": "any"
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "props",
          "inheritedFrom": "Component.props",
          "type": "Readonly<SimpleDialogProps> & Readonly<>"
        },
        {
          "documentation": {
            "contents": [],
            "contentsRaw": "",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isDeprecated": "https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs",
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "refs",
          "inheritedFrom": "Component.refs",
          "type": "{ [key: string]: ReactInstance }"
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "state",
          "inheritedFrom": "Component.state",
          "type": "Readonly<S>"
        }
      ],
      "constructorType": {
        "documentation": {
          "contents": [
            {
              "tag": "see",
              "value": "https://reactjs.org/docs/legacy-context.html"
            }
          ],
          "contentsRaw": "@see https://reactjs.org/docs/legacy-context.html",
          "metadata": {}
        },
        "fileName": "node_modules/@types/react/index.d.ts",
        "flags": {
          "isDeprecated": true,
          "isExported": true,
          "isExternal": false,
          "isOptional": false,
          "isPrivate": false,
          "isProtected": false,
          "isPublic": false,
          "isRest": false,
          "isStatic": false
        },
        "kind": "constructor",
        "name": "constructor",
        "inheritedFrom": "Component.__constructor",
        "signatures": [
          {
            "documentation": {
              "contents": [],
              "contentsRaw": "",
              "metadata": {}
            },
            "fileName": "node_modules/@types/react/index.d.ts",
            "kind": "signature",
            "name": "new SimpleDialog",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "Readonly<SimpleDialogProps>"
              }
            ],
            "returnType": "SimpleDialog",
            "type": "(props: Readonly<SimpleDialogProps>) => SimpleDialog"
          },
          {
            "documentation": {
              "contents": [
                {
                  "tag": "see",
                  "value": "https://reactjs.org/docs/legacy-context.html"
                }
              ],
              "contentsRaw": "@see https://reactjs.org/docs/legacy-context.html",
              "metadata": {}
            },
            "fileName": "node_modules/@types/react/index.d.ts",
            "kind": "signature",
            "name": "new SimpleDialog",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "SimpleDialogProps"
              },
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": true,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "context",
                "type": "any"
              }
            ],
            "returnType": "SimpleDialog",
            "type": "(props: SimpleDialogProps, context?: any) => SimpleDialog"
          }
        ]
      }
    },
    "DialogTitleProps": {
      "documentation": {
        "contents": [
          "<p>The Dialog title.</p>\n"
        ],
        "contentsRaw": "The Dialog title.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "DialogTitleProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L53",
      "methods": [],
      "properties": []
    },
    "DialogContentProps": {
      "documentation": {
        "contents": [
          "<p>The Dialog content.</p>\n"
        ],
        "contentsRaw": "The Dialog content.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "DialogContentProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L63",
      "methods": [],
      "properties": []
    },
    "DialogActionsProps": {
      "documentation": {
        "contents": [
          "<p>Actions container for the Dialog.</p>\n"
        ],
        "contentsRaw": "Actions container for the Dialog.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "DialogActionsProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L72",
      "methods": [],
      "properties": []
    },
    "DialogButtonProps": {
      "documentation": {
        "contents": [
          "<p>Action buttons for the Dialog.</p>\n"
        ],
        "contentsRaw": "Action buttons for the Dialog.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "DialogButtonProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L81",
      "extends": [
        "ButtonProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{accent: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{accent: true}}`",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "accent",
          "inheritedFrom": "DeprecatedRippleProps.accent",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>An action returned in evt.detail.action to the onClose handler.</p>\n"
            ],
            "contentsRaw": "An action returned in evt.detail.action to the onClose handler.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "action",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L83",
          "type": "undefined | string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Content specified as children.</p>\n"
            ],
            "contentsRaw": "Content specified as children.",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "inheritedFrom": "ButtonProps.children",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the Button dense.</p>\n"
            ],
            "contentsRaw": "Make the Button dense.",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dense",
          "inheritedFrom": "ButtonProps.dense",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the button disabled</p>\n"
            ],
            "contentsRaw": "Make the button disabled",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "inheritedFrom": "ButtonProps.disabled",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>An Icon for the Button</p>\n"
            ],
            "contentsRaw": "An Icon for the Button",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "inheritedFrom": "ButtonProps.icon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates this is the default selected action when pressing enter</p>\n"
            ],
            "contentsRaw": "Indicates this is the default selected action when pressing enter",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isDefaultAction",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L85",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Content specified as a label prop.</p>\n"
            ],
            "contentsRaw": "Content specified as a label prop.",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "inheritedFrom": "ButtonProps.label",
          "type": "React.ReactNode | any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the button outlined.</p>\n"
            ],
            "contentsRaw": "Make the button outlined.",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "outlined",
          "inheritedFrom": "ButtonProps.outlined",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the Button raised.</p>\n"
            ],
            "contentsRaw": "Make the Button raised.",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "raised",
          "inheritedFrom": "ButtonProps.raised",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Adds a ripple effect to the component</p>\n"
            ],
            "contentsRaw": "Adds a ripple effect to the component",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ripple",
          "inheritedFrom": "WithRippleProps.ripple",
          "type": "RipplePropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{surface: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{surface: true}}`",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "surface",
          "inheritedFrom": "DeprecatedRippleProps.surface",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>A trailing icon for the Button</p>\n"
            ],
            "contentsRaw": "A trailing icon for the Button",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "trailingIcon",
          "inheritedFrom": "ButtonProps.trailingIcon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{unbounded: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{unbounded: true}}`",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "unbounded",
          "inheritedFrom": "DeprecatedRippleProps.unbounded",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Make the button unelevated.</p>\n"
            ],
            "contentsRaw": "Make the button unelevated.",
            "metadata": {}
          },
          "fileName": "src/dialog/node_modules/@rmwc/button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "unelevated",
          "inheritedFrom": "ButtonProps.unelevated",
          "type": "undefined | false | true"
        }
      ]
    },
    "DialogProps": {
      "documentation": {
        "contents": [
          "<p>A Dialog component.</p>\n"
        ],
        "contentsRaw": "A Dialog component.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "DialogProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L115",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback for when the Dialog closes. evt.detail = { action?: string }</p>\n"
            ],
            "contentsRaw": "Callback for when the Dialog closes. evt.detail = { action?: string }",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L121",
          "type": "undefined | (evt: DialogOnCloseEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback for when the Dialog opens.</p>\n"
            ],
            "contentsRaw": "Callback for when the Dialog opens.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpen",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L119",
          "type": "undefined | (evt: DialogOnOpenEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback to use if you need more direct access to the Dialog&#39;s lifecycle.</p>\n"
            ],
            "contentsRaw": "Callback to use if you need more direct access to the Dialog's lifecycle.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onStateChange",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L123",
          "type": "undefined | (state: \"opening\" | \"opened\" | \"closing\" | \"closed\") => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether or not the Dialog is showing.</p>\n"
            ],
            "contentsRaw": "Whether or not the Dialog is showing.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "open",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L117",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Prevent the dialog from closing when the scrim is clicked.</p>\n"
            ],
            "contentsRaw": "Prevent the dialog from closing when the scrim is clicked.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "preventOutsideDismiss",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L125",
          "type": "undefined | false | true"
        }
      ]
    },
    "SimpleDialogProps": {
      "documentation": {
        "contents": [
          "<p>A SimpleDialog component for ease of use.</p>\n"
        ],
        "contentsRaw": "A SimpleDialog component for ease of use.",
        "metadata": {}
      },
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "SimpleDialogProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L304",
      "extends": [
        "DialogProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Creates an accept button for the default Dialog template with a given label. You can pass <code>null</code> to remove the button.</p>\n"
            ],
            "contentsRaw": "Creates an accept button for the default Dialog template with a given label. You can pass `null` to remove the button.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "acceptLabel",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L314",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Body content for the default Dialog template, rendered before children.</p>\n"
            ],
            "contentsRaw": "Body content for the default Dialog template, rendered before children.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "body",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L310",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Creates an cancel button for the default Dialog with a given label. You can pass <code>null</code> to remove the button.</p>\n"
            ],
            "contentsRaw": "Creates an cancel button for the default Dialog with a given label. You can pass `null` to remove the button.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cancelLabel",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L316",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Any children will be rendered in the body of the default Dialog template.</p>\n"
            ],
            "contentsRaw": "Any children will be rendered in the body of the default Dialog template.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L318",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Additional footer content for the default Dialog template, rendered before any buttons.</p>\n"
            ],
            "contentsRaw": "Additional footer content for the default Dialog template, rendered before any buttons.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "footer",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L312",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Additional Dialog header content for the default Dialog template.</p>\n"
            ],
            "contentsRaw": "Additional Dialog header content for the default Dialog template.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "header",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L308",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback for when the Dialog closes. evt.detail = { action?: string }</p>\n"
            ],
            "contentsRaw": "Callback for when the Dialog closes. evt.detail = { action?: string }",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L121",
          "inheritedFrom": "DialogProps.onClose",
          "type": "undefined | (evt: DialogOnCloseEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback for when the Dialog opens.</p>\n"
            ],
            "contentsRaw": "Callback for when the Dialog opens.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpen",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L119",
          "inheritedFrom": "DialogProps.onOpen",
          "type": "undefined | (evt: DialogOnOpenEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback to use if you need more direct access to the Dialog&#39;s lifecycle.</p>\n"
            ],
            "contentsRaw": "Callback to use if you need more direct access to the Dialog's lifecycle.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onStateChange",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L123",
          "inheritedFrom": "DialogProps.onStateChange",
          "type": "undefined | (state: \"opening\" | \"opened\" | \"closing\" | \"closed\") => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether or not the Dialog is showing.</p>\n"
            ],
            "contentsRaw": "Whether or not the Dialog is showing.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "open",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L117",
          "inheritedFrom": "DialogProps.open",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Prevent the dialog from closing when the scrim is clicked.</p>\n"
            ],
            "contentsRaw": "Prevent the dialog from closing when the scrim is clicked.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "preventOutsideDismiss",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L125",
          "inheritedFrom": "DialogProps.preventOutsideDismiss",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>A title for the default Dialog template.</p>\n"
            ],
            "contentsRaw": "A title for the default Dialog template.",
            "metadata": {}
          },
          "fileName": "src/dialog/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L306",
          "type": "React.ReactNode"
        }
      ]
    },
    "DialogOnOpenEventT": {
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "DialogOnOpenEventT",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L111",
      "type": "RMWC.CustomEventT<{}>"
    },
    "DialogOnCloseEventT": {
      "fileName": "src/dialog/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "DialogOnCloseEventT",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/36c0b82d0/src/dialog/index.tsx#L112",
      "type": "RMWC.CustomEventT<>"
    }
  }
}
