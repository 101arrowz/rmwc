{
	"id": 0,
	"name": "@rmwc/icon",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/jamesmfriedman/Sites/rmwc/src/icon/index.tsx",
			"children": [
				{
					"id": 18,
					"name": "DeprecatedIconProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 19,
							"name": "iconOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "DEPRECATED: Additional Icon Options. See the Icon component documentation."
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 53,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "IconOptions",
								"id": 2
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								19
							]
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 51,
							"character": 36
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "IconProps",
							"id": 15
						}
					]
				},
				{
					"id": 2,
					"name": "IconOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6,
							"name": "basename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A base className for the icon namespace, i.e. material-icons."
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 35,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 3,
							"name": "content",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 17,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "IconElementT",
								"id": 20
							}
						},
						{
							"id": 5,
							"name": "prefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A className prefix to use when using css font icons that use prefixes,\ni.e. font-awesome-, ion-, glyphicons-.\nThis only applies when using the 'className' strategy."
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 33,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 7,
							"name": "render",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A render function to use when using the 'custom' strategy."
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 37,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 8,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 9,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 10,
															"name": "props",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 11,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 13,
																			"name": "className",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "index.tsx",
																					"line": 38,
																					"character": 45
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 12,
																			"name": "content",
																			"kind": 32,
																			"kindString": "Variable",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "index.tsx",
																					"line": 38,
																					"character": 20
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "IconElementT",
																				"id": 20
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Variables",
																			"kind": 32,
																			"children": [
																				13,
																				12
																			]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "index.tsx",
																			"line": 38,
																			"character": 10
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "React.ReactNode"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 14,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A size to render the icon"
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 41,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "xsmall"
									},
									{
										"type": "stringLiteral",
										"value": "small"
									},
									{
										"type": "stringLiteral",
										"value": "medium"
									},
									{
										"type": "stringLiteral",
										"value": "large"
									},
									{
										"type": "stringLiteral",
										"value": "xlarge"
									}
								]
							}
						},
						{
							"id": 4,
							"name": "strategy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Handle multiple methods of embedding an icon.\n'ligature' uses ligature style embedding like material-icons,\n'className' adds a class onto the element for libraries like glyphicons and ion icons,\n'url' will load a remote image, and\n'component' will render content as children like SVGs or any other React node.\n'custom' allows you to specify your own render prop.\nIf not set, 'auto' will be used or the defaults set inside of RMWCProvider."
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 27,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "IconStrategyT",
								"id": 21
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6,
								3,
								5,
								7,
								14,
								4
							]
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 16,
							"character": 28
						}
					]
				},
				{
					"id": 15,
					"name": "IconProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 16,
							"name": "icon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The icon to use. This can be a string for a font icon, a url, or whatever the selected strategy needs."
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 48,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "IconPropT",
								"id": 22
							}
						},
						{
							"id": 17,
							"name": "iconOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "DEPRECATED: Additional Icon Options. See the Icon component documentation."
							},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 53,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "IconOptions",
								"id": 2
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DeprecatedIconProps.iconOptions",
								"id": 19
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								16,
								17
							]
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 46,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "DeprecatedIconProps",
							"id": 18
						}
					]
				},
				{
					"id": 20,
					"name": "IconElementT",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 6,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ReactElement",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				},
				{
					"id": 22,
					"name": "IconPropT",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 44,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "IconElementT",
								"id": 20
							},
							{
								"type": "reference",
								"name": "IconOptions",
								"id": 2
							}
						]
					}
				},
				{
					"id": 21,
					"name": "IconStrategyT",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 8,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "auto"
							},
							{
								"type": "stringLiteral",
								"value": "ligature"
							},
							{
								"type": "stringLiteral",
								"value": "className"
							},
							{
								"type": "stringLiteral",
								"value": "url"
							},
							{
								"type": "stringLiteral",
								"value": "component"
							},
							{
								"type": "stringLiteral",
								"value": "custom"
							}
						]
					}
				},
				{
					"id": 68,
					"name": "Icon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "An Icon component. Most of these options can be set once globally, read the documentation on Provider for more info."
					},
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 142,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 69,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "Object"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " withProviderContext()(\n  ({\n    icon,\n    iconOptions: deprecatedIconOption,\n    providerContext,\n    ...rest\n  }: IconProps &\n    DeprecatedIconProps &\n    WithProviderContext &\n    ComponentProps) => {\n    // handle deprecation\n    if (!!deprecatedIconOption) {\n      const converted = {\n        content: typeof icon === 'string' ? icon : `<MyComponent {...}/>`,\n        ...deprecatedIconOption\n      };\n\n      deprecationWarning(\n        `Icon component prop 'iconOptions' is deprecated. You options should now be passed directly to the 'icon' prop. I.E. icon={${JSON.stringify(\n          converted\n        )}}`\n      );\n    }\n\n    // Build icon options object\n    const iconOptions: IconOptions = {\n      ...buildIconOptions(icon),\n      ...deprecatedIconOption\n    };\n\n    // Get provider options\n    const {\n      basename: providerBasename = null,\n      prefix: providerPrefix = null,\n      strategy: providerStrategy = null,\n      render: providerRender = null\n    } = providerContext.icon || {};\n\n    const content = iconOptions.content;\n\n    const strategyToUse = getIconStrategy(\n      content,\n      iconOptions.strategy || null,\n      providerStrategy || null\n    );\n    const prefixToUse = iconOptions.prefix || providerPrefix;\n    const basenameToUse =\n      iconOptions.basename === undefined\n        ? providerBasename\n        : iconOptions.basename;\n    const iconClassName =\n      strategyToUse === 'className' && typeof content === 'string'\n        ? `${String(prefixToUse)}${content}`\n        : null;\n\n    const renderToUse =\n      strategyToUse === 'custom'\n        ? iconOptions.render || providerRender\n        : !!strategyToUse && iconRenderMap[strategyToUse] !== undefined\n        ? iconRenderMap[strategyToUse]\n        : undefined;\n\n    if (!renderToUse) {\n      console.error(\n        `Icon: rendering not implemented for ${String(strategyToUse)}.`\n      );\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        {renderToUse({\n          ...rest,\n          content,\n          className: classNames(\n            'rmwc-icon',\n            basenameToUse,\n            rest.className,\n            iconClassName,\n            {\n              [`rmwc-icon--size-${iconOptions.size || ''}`]: !!iconOptions.size\n            }\n          )\n        })}\n      </React.Fragment>\n    );\n  }\n)"
				},
				{
					"id": 66,
					"name": "IconRoot",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 137,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "ForwardRefExoticComponent",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 67,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									},
									{
										"type": "reference",
										"name": "RefAttributes",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						]
					},
					"defaultValue": " componentFactory({ displayName: 'IconRoot', tag: 'i' })"
				},
				{
					"id": 61,
					"name": "buildIconOptions",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 62,
							"name": "buildIconOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 63,
									"name": "icon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "IconPropT",
										"id": 22
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "IconOptions",
										"id": 2
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 64,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 65,
													"name": "content",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 131,
															"character": 13
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"name": "ReactElement",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "Object"
																	}
																]
															}
														]
													},
													"defaultValue": " icon"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														65
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 128,
							"character": 22
						}
					]
				},
				{
					"id": 26,
					"name": "getIconStrategy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "Get the actual icon strategy to use"
					},
					"signatures": [
						{
							"id": 27,
							"name": "getIconStrategy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the actual icon strategy to use"
							},
							"parameters": [
								{
									"id": 28,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "React.ReactNode"
									}
								},
								{
									"id": 29,
									"name": "strategy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								},
								{
									"id": 30,
									"name": "providerStrategy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 82,
							"character": 28
						}
					]
				},
				{
					"id": 23,
					"name": "processAutoStrategy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Given content, tries to figure out an appropriate strategy for it"
					},
					"signatures": [
						{
							"id": 24,
							"name": "processAutoStrategy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given content, tries to figure out an appropriate strategy for it"
							},
							"parameters": [
								{
									"id": 25,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "React.ReactNode"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IconStrategyT",
								"id": 21
							}
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 59,
							"character": 25
						}
					]
				},
				{
					"id": 37,
					"name": "renderClassName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 38,
							"name": "renderClassName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 39,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 40,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 41,
													"name": "content",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 101,
															"character": 9
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															},
															{
																"type": "reference",
																"name": "__type"
															},
															{
																"type": "reference",
																"name": "ReactElement",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																]
															},
															{
																"type": "reference",
																"name": "ReactNodeArray"
															},
															{
																"type": "reference",
																"name": "ReactPortal"
															}
														]
													}
												},
												{
													"id": 42,
													"name": "rest",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 102,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "rest",
														"id": 42
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														41,
														42
													]
												}
											],
											"sources": [
												{
													"fileName": "index.tsx",
													"line": 100,
													"character": 25
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 100,
							"character": 21
						}
					]
				},
				{
					"id": 49,
					"name": "renderComponent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 50,
							"name": "renderComponent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 51,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 52,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 53,
													"name": "content",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 112,
															"character": 9
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															},
															{
																"type": "reference",
																"name": "__type"
															},
															{
																"type": "reference",
																"name": "ReactElement",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																]
															},
															{
																"type": "reference",
																"name": "ReactNodeArray"
															},
															{
																"type": "reference",
																"name": "ReactPortal"
															}
														]
													}
												},
												{
													"id": 54,
													"name": "rest",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 113,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "rest",
														"id": 54
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														53,
														54
													]
												}
											],
											"sources": [
												{
													"fileName": "index.tsx",
													"line": 111,
													"character": 25
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 111,
							"character": 21
						}
					]
				},
				{
					"id": 31,
					"name": "renderLigature",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 32,
							"name": "renderLigature",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 33,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 34,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 35,
													"name": "content",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 96,
															"character": 33
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															},
															{
																"type": "reference",
																"name": "__type"
															},
															{
																"type": "reference",
																"name": "ReactElement",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																]
															},
															{
																"type": "reference",
																"name": "ReactNodeArray"
															},
															{
																"type": "reference",
																"name": "ReactPortal"
															}
														]
													}
												},
												{
													"id": 36,
													"name": "rest",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 96,
															"character": 42
														}
													],
													"type": {
														"type": "reference",
														"name": "rest",
														"id": 36
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														35,
														36
													]
												}
											],
											"sources": [
												{
													"fileName": "index.tsx",
													"line": 96,
													"character": 24
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 96,
							"character": 20
						}
					]
				},
				{
					"id": 43,
					"name": "renderUrl",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 44,
							"name": "renderUrl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 45,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 46,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 47,
													"name": "content",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 107,
															"character": 28
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 48,
													"name": "rest",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "index.tsx",
															"line": 107,
															"character": 37
														}
													],
													"type": {
														"type": "reference",
														"name": "rest",
														"id": 48
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														47,
														48
													]
												}
											],
											"sources": [
												{
													"fileName": "index.tsx",
													"line": 107,
													"character": 19
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 107,
							"character": 15
						}
					]
				},
				{
					"id": 55,
					"name": "iconRenderMap",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 60,
							"name": "auto",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 125,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "undefined"
							},
							"defaultValue": " undefined"
						},
						{
							"id": 57,
							"name": "className",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 122,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "renderClassName",
								"id": 38
							},
							"defaultValue": " renderClassName"
						},
						{
							"id": 59,
							"name": "component",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 124,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "renderComponent",
								"id": 50
							},
							"defaultValue": " renderComponent"
						},
						{
							"id": 56,
							"name": "ligature",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 121,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "renderLigature",
								"id": 32
							},
							"defaultValue": " renderLigature"
						},
						{
							"id": 58,
							"name": "url",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "index.tsx",
									"line": 123,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "renderUrl",
								"id": 44
							},
							"defaultValue": " renderUrl"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								60,
								57,
								59,
								56,
								58
							]
						}
					],
					"sources": [
						{
							"fileName": "index.tsx",
							"line": 118,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						18,
						2,
						15
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						20,
						22,
						21
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						68,
						66
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						61,
						26,
						23,
						37,
						49,
						31,
						43
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						55
					]
				}
			],
			"sources": [
				{
					"fileName": "index.tsx",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1
			]
		}
	]
}